<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.2">
<meta name="author" content="BioMed Central Development Team, Oliver Drotbohm, Greg Turnquist, Christoph Strobl, Peter-Josef Meisch">
<title>Spring Data Elasticsearch - Reference Documentation</title>
<link rel="stylesheet" href="./css/spring.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="book toc2 toc-left">
<div id="header">
<h1>Spring Data Elasticsearch - Reference Documentation</h1>
<div class="details">
<span id="author" class="author">BioMed Central Development Team</span><br>
<span id="author2" class="author">Oliver Drotbohm</span><br>
<span id="author3" class="author">Greg Turnquist</span><br>
<span id="author4" class="author">Christoph Strobl</span><br>
<span id="author5" class="author">Peter-Josef Meisch</span><br>
<span id="revnumber">version 4.2.6,</span>
<span id="revdate">2021-10-18</span>
</div>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel0">
<li><a href="#preface">Preface</a>
<ul class="sectlevel1">
<li><a href="#new-features">1. What&#8217;s new</a>
<ul class="sectlevel2">
<li><a href="#new-features.4-2-0">1.1. New in Spring Data Elasticsearch 4.2</a></li>
<li><a href="#new-features.4-1-0">1.2. New in Spring Data Elasticsearch 4.1</a></li>
<li><a href="#new-features.4-0-0">1.3. New in Spring Data Elasticsearch 4.0</a></li>
<li><a href="#new-features.3-2-0">1.4. New in Spring Data Elasticsearch 3.2</a></li>
</ul>
</li>
<li><a href="#preface.metadata">2. Project Metadata</a></li>
<li><a href="#preface.requirements">3. Requirements</a>
<ul class="sectlevel2">
<li><a href="#preface.versions">3.1. Versions</a></li>
</ul>
</li>
<li><a href="#repositories">4. Working with Spring Data Repositories</a>
<ul class="sectlevel2">
<li><a href="#repositories.core-concepts">4.1. Core concepts</a></li>
<li><a href="#repositories.query-methods">4.2. Query Methods</a></li>
<li><a href="#repositories.definition">4.3. Defining Repository Interfaces</a>
<ul class="sectlevel3">
<li><a href="#repositories.definition-tuning">4.3.1. Fine-tuning Repository Definition</a></li>
<li><a href="#repositories.multiple-modules">4.3.2. Using Repositories with Multiple Spring Data Modules</a></li>
</ul>
</li>
<li><a href="#repositories.query-methods.details">4.4. Defining Query Methods</a>
<ul class="sectlevel3">
<li><a href="#repositories.query-methods.query-lookup-strategies">4.4.1. Query Lookup Strategies</a></li>
<li><a href="#repositories.query-methods.query-creation">4.4.2. Query Creation</a></li>
<li><a href="#repositories.query-methods.query-property-expressions">4.4.3. Property Expressions</a></li>
<li><a href="#repositories.special-parameters">4.4.4. Special parameter handling</a>
<ul class="sectlevel4">
<li><a href="#repositories.paging-and-sorting">Paging and Sorting</a></li>
</ul>
</li>
<li><a href="#repositories.limit-query-result">4.4.5. Limiting Query Results</a></li>
<li><a href="#repositories.collections-and-iterables">4.4.6. Repository Methods Returning Collections or Iterables</a>
<ul class="sectlevel4">
<li><a href="#repositories.collections-and-iterables.streamable">Using Streamable as Query Method Return Type</a></li>
<li><a href="#repositories.collections-and-iterables.streamable-wrapper">Returning Custom Streamable Wrapper Types</a></li>
<li><a href="#repositories.collections-and-iterables.vavr">Support for Vavr Collections</a></li>
</ul>
</li>
<li><a href="#repositories.nullability">4.4.7. Null Handling of Repository Methods</a>
<ul class="sectlevel4">
<li><a href="#repositories.nullability.annotations">Nullability Annotations</a></li>
<li><a href="#repositories.nullability.kotlin">Nullability in Kotlin-based Repositories</a></li>
</ul>
</li>
<li><a href="#repositories.query-streaming">4.4.8. Streaming Query Results</a></li>
<li><a href="#repositories.query-async">4.4.9. Asynchronous Query Results</a></li>
</ul>
</li>
<li><a href="#repositories.create-instances">4.5. Creating Repository Instances</a>
<ul class="sectlevel3">
<li><a href="#repositories.create-instances.spring">4.5.1. XML Configuration</a>
<ul class="sectlevel4">
<li><a href="#repositories.using-filters">Using Filters</a></li>
</ul>
</li>
<li><a href="#repositories.create-instances.java-config">4.5.2. Java Configuration</a></li>
<li><a href="#repositories.create-instances.standalone">4.5.3. Standalone Usage</a></li>
</ul>
</li>
<li><a href="#repositories.custom-implementations">4.6. Custom Implementations for Spring Data Repositories</a>
<ul class="sectlevel3">
<li><a href="#repositories.single-repository-behavior">4.6.1. Customizing Individual Repositories</a>
<ul class="sectlevel4">
<li><a href="#repositories.configuration">Configuration</a></li>
</ul>
</li>
<li><a href="#repositories.customize-base-repository">4.6.2. Customize the Base Repository</a></li>
</ul>
</li>
<li><a href="#core.domain-events">4.7. Publishing Events from Aggregate Roots</a></li>
<li><a href="#core.extensions">4.8. Spring Data Extensions</a>
<ul class="sectlevel3">
<li><a href="#core.extensions.querydsl">4.8.1. Querydsl Extension</a></li>
<li><a href="#core.web">4.8.2. Web support</a>
<ul class="sectlevel4">
<li><a href="#core.web.basic">Basic Web Support</a></li>
<li><a href="#core.web.pageables">Hypermedia Support for Pageables</a></li>
<li><a href="#core.web.basic.jackson-mappers">Spring Data Jackson Modules</a></li>
<li><a href="#core.web.binding">Web Databinding Support</a></li>
<li><a href="#core.web.type-safe">Querydsl Web Support</a></li>
</ul>
</li>
<li><a href="#core.repository-populators">4.8.3. Repository Populators</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#reference">Reference Documentation</a>
<ul class="sectlevel1">
<li><a href="#elasticsearch.clients">5. Elasticsearch Clients</a>
<ul class="sectlevel2">
<li><a href="#elasticsearch.clients.transport">5.1. Transport Client</a></li>
<li><a href="#elasticsearch.clients.rest">5.2. High Level REST Client</a></li>
<li><a href="#elasticsearch.clients.reactive">5.3. Reactive Client</a></li>
<li><a href="#elasticsearch.clients.configuration">5.4. Client Configuration</a></li>
<li><a href="#elasticsearch.clients.logging">5.5. Client Logging</a></li>
</ul>
</li>
<li><a href="#elasticsearch.mapping">6. Elasticsearch Object Mapping</a>
<ul class="sectlevel2">
<li><a href="#elasticsearch.mapping.meta-model">6.1. Meta Model Object Mapping</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch.mapping.meta-model.annotations">6.1.1. Mapping Annotation Overview</a>
<ul class="sectlevel4">
<li><a href="#elasticsearch.mapping.meta-model.date-formats">Date format mapping</a></li>
<li><a href="#">Mapped field names</a></li>
</ul>
</li>
<li><a href="#elasticsearch.mapping.meta-model.rules">6.1.2. Mapping Rules</a>
<ul class="sectlevel4">
<li><a href="#">Type Hints</a></li>
<li><a href="#">Geospatial Types</a></li>
<li><a href="#">GeoJson Types</a></li>
<li><a href="#">Collections</a></li>
<li><a href="#">Maps</a></li>
</ul>
</li>
<li><a href="#elasticsearch.mapping.meta-model.conversions">6.1.3. Custom Conversions</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#elasticsearch.operations">7. Elasticsearch Operations</a>
<ul class="sectlevel2">
<li><a href="#elasticsearch.operations.template">7.1. ElasticsearchTemplate</a></li>
<li><a href="#elasticsearch.operations.resttemplate">7.2. ElasticsearchRestTemplate</a></li>
<li><a href="#elasticsearch.operations.usage">7.3. Usage examples</a></li>
<li><a href="#elasticsearch.reactive.operations">7.4. Reactive Elasticsearch Operations</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch.reactive.template">7.4.1. Reactive Elasticsearch Template</a>
<ul class="sectlevel4">
<li><a href="#elasticsearch.reactive.template.configuration">Reactive Template Configuration</a></li>
<li><a href="#elasticsearch.reactive.template.usage">Reactive Template Usage</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#elasticsearch.operations.searchresulttypes">7.5. Search Result Types</a></li>
<li><a href="#elasticsearch.operations.queries">7.6. Queries</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch.operations.criteriaquery">7.6.1. CriteriaQuery</a></li>
<li><a href="#elasticsearch.operations.stringquery">7.6.2. StringQuery</a></li>
<li><a href="#elasticsearch.operations.nativesearchquery">7.6.3. NativeSearchQuery</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#elasticsearch.repositories">8. Elasticsearch Repositories</a>
<ul class="sectlevel2">
<li><a href="#elasticsearch.repositories.autocreation">8.1. Automatic creation of indices with the corresponding mapping</a></li>
<li><a href="#elasticsearch.query-methods">8.2. Query methods</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch.query-methods.finders">8.2.1. Query lookup strategies</a>
<ul class="sectlevel4">
<li><a href="#">Declared queries</a></li>
</ul>
</li>
<li><a href="#elasticsearch.query-methods.criterions">8.2.2. Query creation</a></li>
<li><a href="#">8.2.3. Method return types</a></li>
<li><a href="#elasticsearch.query-methods.at-query">8.2.4. Using @Query Annotation</a></li>
</ul>
</li>
<li><a href="#elasticsearch.reactive.repositories">8.3. Reactive Elasticsearch Repositories</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch.reactive.repositories.usage">8.3.1. Usage</a></li>
<li><a href="#elasticsearch.reactive.repositories.configuration">8.3.2. Configuration</a></li>
</ul>
</li>
<li><a href="#elasticsearch.repositories.annotations">8.4. Annotations for repository methods</a>
<ul class="sectlevel3">
<li><a href="#">8.4.1. @Highlight</a></li>
</ul>
</li>
<li><a href="#elasticsearch.annotation">8.5. Annotation based configuration</a></li>
<li><a href="#elasticsearch.cdi">8.6. Elasticsearch Repositories using CDI</a></li>
<li><a href="#elasticsearch.namespace">8.7. Spring Namespace</a></li>
</ul>
</li>
<li><a href="#auditing">9. Auditing</a>
<ul class="sectlevel2">
<li><a href="#auditing.basics">9.1. Basics</a>
<ul class="sectlevel3">
<li><a href="#auditing.annotations">9.1.1. Annotation-based Auditing Metadata</a></li>
<li><a href="#auditing.interfaces">9.1.2. Interface-based Auditing Metadata</a></li>
<li><a href="#auditing.auditor-aware">9.1.3. <code>AuditorAware</code></a></li>
<li><a href="#auditing.reactive-auditor-aware">9.1.4. <code>ReactiveAuditorAware</code></a></li>
</ul>
</li>
<li><a href="#elasticsearch.auditing">9.2. Elasticsearch Auditing</a>
<ul class="sectlevel3">
<li><a href="#">9.2.1. Preparing entities</a></li>
<li><a href="#">9.2.2. Activating auditing</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#entity-callbacks">10. Entity Callbacks</a>
<ul class="sectlevel2">
<li><a href="#entity-callbacks.implement">10.1. Implementing Entity Callbacks</a></li>
<li><a href="#entity-callbacks.register">10.2. Registering Entity Callbacks</a></li>
<li><a href="#elasticsearch.entity-callbacks">10.3. Elasticsearch EntityCallbacks</a></li>
</ul>
</li>
<li><a href="#elasticsearch.jointype">11. Join-Type implementation</a>
<ul class="sectlevel2">
<li><a href="#">11.1. Setting up the data</a></li>
<li><a href="#">11.2. Storing data</a></li>
<li><a href="#">11.3. Retrieving data</a></li>
</ul>
</li>
<li><a href="#elasticsearch.routing">12. Routing values</a>
<ul class="sectlevel2">
<li><a href="#">12.1. Routing on join-types</a></li>
<li><a href="#">12.2. Custom routing values</a></li>
</ul>
</li>
<li><a href="#elasticsearch.misc">13. Miscellaneous Elasticsearch Operation Support</a>
<ul class="sectlevel2">
<li><a href="#elasticsearc.misc.index.settings">13.1. Index settings</a></li>
<li><a href="#elasticsearch.misc.filter">13.2. Filter Builder</a></li>
<li><a href="#elasticsearch.scroll">13.3. Using Scroll For Big Result Set</a></li>
<li><a href="#elasticsearch.misc.sorts">13.4. Sort options</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#appendix">Appendix</a>
<ul class="sectlevel1">
<li><a href="#repositories.namespace-reference">Appendix A: Namespace reference</a>
<ul class="sectlevel2">
<li><a href="#populator.namespace-dao-config">The <code>&lt;repositories /&gt;</code> Element</a></li>
</ul>
</li>
<li><a href="#populator.namespace-reference">Appendix B: Populators namespace reference</a>
<ul class="sectlevel2">
<li><a href="#namespace-dao-config">The &lt;populator /&gt; element</a></li>
</ul>
</li>
<li><a href="#repository-query-keywords">Appendix C: Repository query keywords</a>
<ul class="sectlevel2">
<li><a href="#appendix.query.method.subject">Supported query method subject keywords</a></li>
<li><a href="#appendix.query.method.predicate">Supported query method predicate keywords and modifiers</a></li>
</ul>
</li>
<li><a href="#repository-query-return-types">Appendix D: Repository query return types</a>
<ul class="sectlevel2">
<li><a href="#appendix.query.return.types">Supported Query Return Types</a></li>
</ul>
</li>
<li><a href="#elasticsearch.migration">Appendix E: Migration Guides</a>
<ul class="sectlevel2">
<li><a href="#elasticsearch-migration-guide-3.2-4.0">Upgrading from 3.2.x to 4.0.x</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch-migration-guide-3.2-4.0.jackson-removal">Removal of the used Jackson Mapper</a></li>
<li><a href="#elasticsearch-migration-guide-3.2-4.0.implicit-index-name">Removal of implicit index name from query objects</a></li>
<li><a href="#elasticsearch-migration-guide-3.2-4.0.new-operations">The new Operations interfaces</a></li>
<li><a href="#elasticsearch-migration-guide-3.2-4.0.deprecations">Deprecations</a>
<ul class="sectlevel4">
<li><a href="#">Methods and classes</a></li>
<li><a href="#">Elasticsearch deprecations</a></li>
</ul>
</li>
<li><a href="#elasticsearch-migration-guide-3.2-4.0.removal">Removals</a></li>
</ul>
</li>
<li><a href="#elasticsearch-migration-guide-4.0-4.1">Upgrading from 4.0.x to 4.1.x</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch-migration-guide-4.0-4.1.deprecations">Deprecations</a></li>
<li><a href="#elasticsearch-migration-guide-4.0-4.1.removal">Removals</a></li>
<li><a href="#elasticsearch-migration-guide-4.0-4.1.breaking-changes">Breaking Changes</a>
<ul class="sectlevel4">
<li><a href="#">Return types of ReactiveElasticsearchClient.Indices methods</a></li>
<li><a href="#">Return types of DocumentOperartions.bulkIndex methods</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#elasticsearch-migration-guide-4.1-4.2">Upgrading from 4.1.x to 4.2.x</a>
<ul class="sectlevel3">
<li><a href="#elasticsearch-migration-guide-4.1-4.2.deprecations">Deprecations</a>
<ul class="sectlevel4">
<li><a href="#">@Document parameters</a></li>
</ul>
</li>
<li><a href="#elasticsearch-migration-guide-4.1-4.2.removal">Removals</a></li>
<li><a href="#elasticsearch-migration-guide-4.1-4.2.breaking-changes">Breaking Changes</a>
<ul class="sectlevel4">
<li><a href="#">RefreshPolicy</a></li>
<li><a href="#">Method return types</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>&#169; 2013-2021 The original author(s).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.
</td>
</tr>
</table>
</div>

</div>
</div>
<h1 id="preface" class="sect0"><a class="anchor" href="#preface"></a>Preface</h1>
<div class="openblock partintro">
<div class="content">
<div class="paragraph">
<p>The Spring Data Elasticsearch project applies core Spring concepts to the development of solutions using the Elasticsearch Search Engine.
It provides:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>Templates</em> as a high-level abstraction for storing, searching, sorting documents and building aggregations.</p>
</li>
<li>
<p><em>Repositories</em> which for example enable the user to express queries by defining interfaces having customized method names (for basic information about repositories see <a href="#repositories">Working with Spring Data Repositories</a>).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You will notice similarities to the Spring data solr and mongodb support in the Spring Framework.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="new-features"><a class="anchor" href="#new-features"></a>1. What&#8217;s new</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="new-features.4-2-0"><a class="anchor" href="#new-features.4-2-0"></a>1.1. New in Spring Data Elasticsearch 4.2</h3>
<div class="ulist">
<ul>
<li>
<p>Upgrade to Elasticsearch 7.10.0.</p>
</li>
<li>
<p>Support for custom routing values</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="new-features.4-1-0"><a class="anchor" href="#new-features.4-1-0"></a>1.2. New in Spring Data Elasticsearch 4.1</h3>
<div class="ulist">
<ul>
<li>
<p>Uses Spring 5.3.</p>
</li>
<li>
<p>Upgrade to Elasticsearch 7.9.3.</p>
</li>
<li>
<p>Improved API for alias management.</p>
</li>
<li>
<p>Introduction of <code>ReactiveIndexOperations</code> for index management.</p>
</li>
<li>
<p>Index templates support.</p>
</li>
<li>
<p>Support for Geo-shape data with GeoJson.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="new-features.4-0-0"><a class="anchor" href="#new-features.4-0-0"></a>1.3. New in Spring Data Elasticsearch 4.0</h3>
<div class="ulist">
<ul>
<li>
<p>Uses Spring 5.2.</p>
</li>
<li>
<p>Upgrade to Elasticsearch 7.6.2.</p>
</li>
<li>
<p>Deprecation of <code>TransportClient</code> usage.</p>
</li>
<li>
<p>Implements most of the mapping-types available for the index mappings.</p>
</li>
<li>
<p>Removal of the Jackson <code>ObjectMapper</code>, now using the <a href="#elasticsearch.mapping.meta-model">MappingElasticsearchConverter</a></p>
</li>
<li>
<p>Cleanup of the API in the <code>*Operations</code> interfaces, grouping and renaming methods so that they match the Elasticsearch API, deprecating the old methods, aligning with other Spring Data modules.</p>
</li>
<li>
<p>Introduction of <code>SearchHit&lt;T&gt;</code> class to represent a found document together with the relevant result metadata for this document (i.e. <em>sortValues</em>).</p>
</li>
<li>
<p>Introduction of the <code>SearchHits&lt;T&gt;</code> class to represent a whole search result together with the metadata for the complete search result (i.e. <em>max_score</em>).</p>
</li>
<li>
<p>Introduction of <code>SearchPage&lt;T&gt;</code> class to represent a paged result containing a <code>SearchHits&lt;T&gt;</code> instance.</p>
</li>
<li>
<p>Introduction of the <code>GeoDistanceOrder</code> class to be able to create sorting by geographical distance</p>
</li>
<li>
<p>Implementation of Auditing Support</p>
</li>
<li>
<p>Implementation of lifecycle entity callbacks</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="new-features.3-2-0"><a class="anchor" href="#new-features.3-2-0"></a>1.4. New in Spring Data Elasticsearch 3.2</h3>
<div class="ulist">
<ul>
<li>
<p>Secured Elasticsearch cluster support with Basic Authentication and SSL transport.</p>
</li>
<li>
<p>Upgrade to Elasticsearch 6.8.1.</p>
</li>
<li>
<p>Reactive programming support with <a href="#elasticsearch.reactive.operations">Reactive Elasticsearch Operations</a> and <a href="#elasticsearch.reactive.repositories">Reactive Elasticsearch Repositories</a>.</p>
</li>
<li>
<p>Introduction of the <a href="#elasticsearch.mapping.meta-model">ElasticsearchEntityMapper</a> as an alternative to the Jackson <code>ObjectMapper</code>.</p>
</li>
<li>
<p>Field name customization in <code>@Field</code>.</p>
</li>
<li>
<p>Support for Delete by Query.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="preface.metadata"><a class="anchor" href="#preface.metadata"></a>2. Project Metadata</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Version Control - <a href="https://github.com/spring-projects/spring-data-elasticsearch" class="bare">https://github.com/spring-projects/spring-data-elasticsearch</a></p>
</li>
<li>
<p>API Documentation - <a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/api/" class="bare">https://docs.spring.io/spring-data/elasticsearch/docs/current/api/</a></p>
</li>
<li>
<p>Bugtracker - <a href="https://github.com/spring-projects/spring-data-elasticsearch/issues" class="bare">https://github.com/spring-projects/spring-data-elasticsearch/issues</a></p>
</li>
<li>
<p>Release repository - <a href="https://repo.spring.io/libs-release" class="bare">https://repo.spring.io/libs-release</a></p>
</li>
<li>
<p>Milestone repository - <a href="https://repo.spring.io/libs-milestone" class="bare">https://repo.spring.io/libs-milestone</a></p>
</li>
<li>
<p>Snapshot repository - <a href="https://repo.spring.io/libs-snapshot" class="bare">https://repo.spring.io/libs-snapshot</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="preface.requirements"><a class="anchor" href="#preface.requirements"></a>3. Requirements</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Requires an installation of <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>.</p>
</div>
<div class="sect2">
<h3 id="preface.versions"><a class="anchor" href="#preface.versions"></a>3.1. Versions</h3>
<div class="paragraph">
<p>The following table shows the Elasticsearch versions that are used by Spring Data release trains and version of Spring Data Elasticsearch included in that, as well as the Spring Boot versions referring to that particular Spring Data release train:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 20%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-center valign-top">Spring Data Release Train</th>
<th class="tableblock halign-center valign-top">Spring Data Elasticsearch</th>
<th class="tableblock halign-center valign-top">Elasticsearch</th>
<th class="tableblock halign-center valign-top">Spring Framework</th>
<th class="tableblock halign-center valign-top">Spring Boot</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">2021.0 (Pascal)</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">4.2.1</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">7.12.1</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">5.3.7</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.5.x</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">2020.0 (Ockham)</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">4.1.x</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">7.9.3</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">5.3.2</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.4.x</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">Neumann</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">4.0.x</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">7.6.2</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">5.2.12</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.3.x</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">Moore</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">3.2.x</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">6.8.12</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">5.2.12</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.2.x</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">Lovelace<sup class="footnote" id="_footnote_oom">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">3.1.x<sup class="footnoteref">[<a class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">6.2.2</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">5.1.19</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.1.x</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">Kay<sup class="footnoteref">[<a class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">3.0.x<sup class="footnoteref">[<a class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">5.5.0</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">5.0.13</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.0.x</p></td>
</tr>
<tr>
<td class="tableblock halign-center valign-top"><p class="tableblock">Ingalls<sup class="footnoteref">[<a class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.1.x<sup class="footnoteref">[<a class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup></p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">2.4.0</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">4.3.25</p></td>
<td class="tableblock halign-center valign-top"><p class="tableblock">1.5.x</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Support for upcoming versions of Elasticsearch is being tracked and general compatibility should be given assuming the usage of the <a href="#elasticsearch.clients.rest">high-level REST client</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="repositories"><a class="anchor" href="#repositories"></a>4. Working with Spring Data Repositories</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The goal of the Spring Data repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
<div class="paragraph">
<p><em>Spring Data repository documentation and your module</em></p>
</div>
<div class="paragraph">
<p>This chapter explains the core concepts and interfaces of Spring Data repositories.
The information in this chapter is pulled from the Spring Data Commons module.
It uses the configuration and code samples for the Java Persistence API (JPA) module.
You should adapt the XML namespace declaration and the types to be extended to the equivalents of the particular module that you use. &#8220;<a href="#repositories.namespace-reference">Namespace reference</a>&#8221; covers XML configuration, which is supported across all Spring Data modules that support the repository API. &#8220;<a href="#repository-query-keywords">Repository query keywords</a>&#8221; covers the query method keywords supported by the repository abstraction in general.
For detailed information on the specific features of your module, see the chapter on that module of this document.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="repositories.core-concepts"><a class="anchor" href="#repositories.core-concepts"></a>4.1. Core concepts</h3>
<div class="paragraph">
<p>The central interface in the Spring Data repository abstraction is <code>Repository</code>.
It takes the domain class to manage as well as the ID type of the domain class as type arguments.
This interface acts primarily as a marker interface to capture the types to work with and to help you to discover interfaces that extend this one.
The <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html"><code>CrudRepository</code></a> interface provides sophisticated CRUD functionality for the entity class that is being managed.</p>
</div>
<div id="repositories.repository" class="exampleblock">
<div class="title">Example 1. <code>CrudRepository</code> Interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public interface CrudRepository&lt;T, ID&gt; extends Repository&lt;T, ID&gt; {

  &lt;S extends T&gt; S save(S entity);      <i class="conum" data-value="1"></i><b>(1)</b>

  Optional&lt;T&gt; findById(ID primaryKey); <i class="conum" data-value="2"></i><b>(2)</b>

  Iterable&lt;T&gt; findAll();               <i class="conum" data-value="3"></i><b>(3)</b>

  long count();                        <i class="conum" data-value="4"></i><b>(4)</b>

  void delete(T entity);               <i class="conum" data-value="5"></i><b>(5)</b>

  boolean existsById(ID primaryKey);   <i class="conum" data-value="6"></i><b>(6)</b>

  // … more functionality omitted.
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Saves the given entity.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Returns the entity identified by the given ID.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns all entities.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Returns the number of entities.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Deletes the given entity.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Indicates whether an entity with the given ID exists.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
We also provide persistence technology-specific abstractions, such as <code>JpaRepository</code> or <code>MongoRepository</code>.
Those interfaces extend <code>CrudRepository</code> and expose the capabilities of the underlying persistence technology in addition to the rather generic persistence technology-agnostic interfaces such as <code>CrudRepository</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>On top of the <code>CrudRepository</code>, there is a <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html"><code>PagingAndSortingRepository</code></a> abstraction that adds additional methods to ease paginated access to entities:</p>
</div>
<div class="exampleblock">
<div class="title">Example 2. <code>PagingAndSortingRepository</code> interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public interface PagingAndSortingRepository&lt;T, ID&gt; extends CrudRepository&lt;T, ID&gt; {

  Iterable&lt;T&gt; findAll(Sort sort);

  Page&lt;T&gt; findAll(Pageable pageable);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>To access the second page of <code>User</code> by a page size of 20, you could do something like the following:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">PagingAndSortingRepository&lt;User, Long&gt; repository = // … get access to a bean
Page&lt;User&gt; users = repository.findAll(PageRequest.of(1, 20));</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In addition to query methods, query derivation for both count and delete queries is available.
The following list shows the interface definition for a derived count query:</p>
</div>
<div class="exampleblock">
<div class="title">Example 3. Derived Count Query</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface UserRepository extends CrudRepository&lt;User, Long&gt; {

  long countByLastname(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The following listing shows the interface definition for a derived delete query:</p>
</div>
<div class="exampleblock">
<div class="title">Example 4. Derived Delete Query</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface UserRepository extends CrudRepository&lt;User, Long&gt; {

  long deleteByLastname(String lastname);

  List&lt;User&gt; removeByLastname(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.query-methods"><a class="anchor" href="#repositories.query-methods"></a>4.2. Query Methods</h3>
<div class="paragraph">
<p>Standard CRUD functionality repositories usually have queries on the underlying datastore.
With Spring Data, declaring those queries becomes a four-step process:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Declare an interface extending Repository or one of its subinterfaces and type it to the domain class and ID type that it should handle, as shown in the following example:</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface PersonRepository extends Repository&lt;Person, Long&gt; { … }</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Declare query methods on the interface.</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface PersonRepository extends Repository&lt;Person, Long&gt; {
  List&lt;Person&gt; findByLastname(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Set up Spring to create proxy instances for those interfaces, either with <a href="#repositories.create-instances.java-config">JavaConfig</a> or with <a href="#repositories.create-instances">XML configuration</a>.</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>To use Java configuration, create a class similar to the following:</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@EnableJpaRepositories
class Config { … }</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>To use XML configuration, define a bean similar to the following:</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
     https://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/data/jpa
     https://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;

   &lt;jpa:repositories base-package="com.acme.repositories"/&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The JPA namespace is used in this example.
If you use the repository abstraction for any other store, you need to change this to the appropriate namespace declaration of your store module.
In other words, you should exchange <code>jpa</code> in favor of, for example, <code>mongodb</code>.</p>
</div>
<div class="paragraph">
<p>Also, note that the JavaConfig variant does not configure a package explicitly, because the package of the annotated class is used by default.
To customize the package to scan, use one of the <code>basePackage…</code> attributes of the data-store-specific repository&#8217;s <code>@Enable${store}Repositories</code>-annotation.</p>
</div>
</li>
</ol>
</div>
</li>
<li>
<p>Inject the repository instance and use it, as shown in the following example:</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class SomeClient {

  private final PersonRepository repository;

  SomeClient(PersonRepository repository) {
    this.repository = repository;
  }

  void doSomething() {
    List&lt;Person&gt; persons = repository.findByLastname("Matthews");
  }
}</code></pre>
</div>
</div>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>The sections that follow explain each step in detail:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="#repositories.definition">Defining Repository Interfaces</a></p>
</li>
<li>
<p><a href="#repositories.query-methods.details">Defining Query Methods</a></p>
</li>
<li>
<p><a href="#repositories.create-instances">Creating Repository Instances</a></p>
</li>
<li>
<p><a href="#repositories.custom-implementations">Custom Implementations for Spring Data Repositories</a></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="repositories.definition"><a class="anchor" href="#repositories.definition"></a>4.3. Defining Repository Interfaces</h3>
<div class="paragraph">
<p>To define a repository interface, you first need to define a domain class-specific repository interface.
The interface must extend <code>Repository</code> and be typed to the domain class and an ID type.
If you want to expose CRUD methods for that domain type, extend <code>CrudRepository</code> instead of <code>Repository</code>.</p>
</div>
<div class="sect3">
<h4 id="repositories.definition-tuning"><a class="anchor" href="#repositories.definition-tuning"></a>4.3.1. Fine-tuning Repository Definition</h4>
<div class="paragraph">
<p>Typically, your repository interface extends <code>Repository</code>, <code>CrudRepository</code>, or <code>PagingAndSortingRepository</code>.
Alternatively, if you do not want to extend Spring Data interfaces, you can also annotate your repository interface with <code>@RepositoryDefinition</code>.
Extending <code>CrudRepository</code> exposes a complete set of methods to manipulate your entities.
If you prefer to be selective about the methods being exposed, copy the methods you want to expose from <code>CrudRepository</code> into your domain repository.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Doing so lets you define your own abstractions on top of the provided Spring Data Repositories functionality.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The following example shows how to selectively expose CRUD methods (<code>findById</code> and <code>save</code>, in this case):</p>
</div>
<div class="exampleblock">
<div class="title">Example 5. Selectively exposing CRUD methods</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@NoRepositoryBean
interface MyBaseRepository&lt;T, ID&gt; extends Repository&lt;T, ID&gt; {

  Optional&lt;T&gt; findById(ID id);

  &lt;S extends T&gt; S save(S entity);
}

interface UserRepository extends MyBaseRepository&lt;User, Long&gt; {
  User findByEmailAddress(EmailAddress emailAddress);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In the prior example, you defined a common base interface for all your domain repositories and exposed <code>findById(…)</code> as well as <code>save(…)</code>.These methods are routed into the base repository implementation of the store of your choice provided by Spring Data (for example, if you use JPA, the implementation is <code>SimpleJpaRepository</code>), because they match the method signatures in <code>CrudRepository</code>.
So the <code>UserRepository</code> can now save users, find individual users by ID, and trigger a query to find <code>Users</code> by email address.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The intermediate repository interface is annotated with <code>@NoRepositoryBean</code>.
Make sure you add that annotation to all repository interfaces for which Spring Data should not create instances at runtime.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.multiple-modules"><a class="anchor" href="#repositories.multiple-modules"></a>4.3.2. Using Repositories with Multiple Spring Data Modules</h4>
<div class="paragraph">
<p>Using a unique Spring Data module in your application makes things simple, because all repository interfaces in the defined scope are bound to the Spring Data module.
Sometimes, applications require using more than one Spring Data module.
In such cases, a repository definition must distinguish between persistence technologies.
When it detects multiple repository factories on the class path, Spring Data enters strict repository configuration mode.
Strict configuration uses details on the repository or the domain class to decide about Spring Data module binding for a repository definition:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If the repository definition <a href="#repositories.multiple-modules.types">extends the module-specific repository</a>, it is a valid candidate for the particular Spring Data module.</p>
</li>
<li>
<p>If the domain class is <a href="#repositories.multiple-modules.annotations">annotated with the module-specific type annotation</a>, it is a valid candidate for the particular Spring Data module.
Spring Data modules accept either third-party annotations (such as JPA&#8217;s <code>@Entity</code>) or provide their own annotations (such as <code>@Document</code> for Spring Data MongoDB and Spring Data Elasticsearch).</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses module-specific interfaces (JPA in this case):</p>
</div>
<div id="repositories.multiple-modules.types" class="exampleblock">
<div class="title">Example 6. Repository definitions using module-specific interfaces</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface MyRepository extends JpaRepository&lt;User, Long&gt; { }

@NoRepositoryBean
interface MyBaseRepository&lt;T, ID&gt; extends JpaRepository&lt;T, ID&gt; { … }

interface UserRepository extends MyBaseRepository&lt;User, Long&gt; { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>MyRepository</code> and <code>UserRepository</code> extend <code>JpaRepository</code> in their type hierarchy.
They are valid candidates for the Spring Data JPA module.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses generic interfaces:</p>
</div>
<div class="exampleblock">
<div class="title">Example 7. Repository definitions using generic interfaces</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface AmbiguousRepository extends Repository&lt;User, Long&gt; { … }

@NoRepositoryBean
interface MyBaseRepository&lt;T, ID&gt; extends CrudRepository&lt;T, ID&gt; { … }

interface AmbiguousUserRepository extends MyBaseRepository&lt;User, Long&gt; { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>AmbiguousRepository</code> and <code>AmbiguousUserRepository</code> extend only <code>Repository</code> and <code>CrudRepository</code> in their type hierarchy.
While this is fine when using a unique Spring Data module, multiple modules cannot distinguish to which particular Spring Data these repositories should be bound.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses domain classes with annotations:</p>
</div>
<div id="repositories.multiple-modules.annotations" class="exampleblock">
<div class="title">Example 8. Repository definitions using domain classes with annotations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface PersonRepository extends Repository&lt;Person, Long&gt; { … }

@Entity
class Person { … }

interface UserRepository extends Repository&lt;User, Long&gt; { … }

@Document
class User { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>PersonRepository</code> references <code>Person</code>, which is annotated with the JPA <code>@Entity</code> annotation, so this repository clearly belongs to Spring Data JPA. <code>UserRepository</code> references <code>User</code>, which is annotated with Spring Data MongoDB&#8217;s <code>@Document</code> annotation.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>The following bad example shows a repository that uses domain classes with mixed annotations:</p>
</div>
<div class="exampleblock">
<div class="title">Example 9. Repository definitions using domain classes with mixed annotations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface JpaPersonRepository extends Repository&lt;Person, Long&gt; { … }

interface MongoDBPersonRepository extends Repository&lt;Person, Long&gt; { … }

@Entity
@Document
class Person { … }</code></pre>
</div>
</div>
<div class="paragraph">
<p>This example shows a domain class using both JPA and Spring Data MongoDB annotations.
It defines two repositories, <code>JpaPersonRepository</code> and <code>MongoDBPersonRepository</code>.
One is intended for JPA and the other for MongoDB usage.
Spring Data is no longer able to tell the repositories apart, which leads to undefined behavior.</p>
</div>
</div>
</div>
<div class="paragraph">
<p><a href="#repositories.multiple-modules.types">Repository type details</a> and <a href="#repositories.multiple-modules.annotations">distinguishing domain class annotations</a> are used for strict repository configuration to identify repository candidates for a particular Spring Data module.
Using multiple persistence technology-specific annotations on the same domain type is possible and enables reuse of domain types across multiple persistence technologies.
However, Spring Data can then no longer determine a unique module with which to bind the repository.</p>
</div>
<div class="paragraph">
<p>The last way to distinguish repositories is by scoping repository base packages.
Base packages define the starting points for scanning for repository interface definitions, which implies having repository definitions located in the appropriate packages.
By default, annotation-driven configuration uses the package of the configuration class.
The <a href="#repositories.create-instances.spring">base package in XML-based configuration</a> is mandatory.</p>
</div>
<div class="paragraph">
<p>The following example shows annotation-driven configuration of base packages:</p>
</div>
<div class="exampleblock">
<div class="title">Example 10. Annotation-driven configuration of base packages</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@EnableJpaRepositories(basePackages = "com.acme.repositories.jpa")
@EnableMongoRepositories(basePackages = "com.acme.repositories.mongo")
class Configuration { … }</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.query-methods.details"><a class="anchor" href="#repositories.query-methods.details"></a>4.4. Defining Query Methods</h3>
<div class="paragraph">
<p>The repository proxy has two ways to derive a store-specific query from the method name:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>By deriving the query from the method name directly.</p>
</li>
<li>
<p>By using a manually defined query.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Available options depend on the actual store.
However, there must be a strategy that decides what actual query is created.
The next section describes the available options.</p>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-lookup-strategies"><a class="anchor" href="#repositories.query-methods.query-lookup-strategies"></a>4.4.1. Query Lookup Strategies</h4>
<div class="paragraph">
<p>The following strategies are available for the repository infrastructure to resolve the query.
With XML configuration, you can configure the strategy at the namespace through the <code>query-lookup-strategy</code> attribute.
For Java configuration, you can use the <code>queryLookupStrategy</code> attribute of the <code>Enable${store}Repositories</code> annotation.
Some strategies may not be supported for particular datastores.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>CREATE</code> attempts to construct a store-specific query from the query method name.
The general approach is to remove a given set of well known prefixes from the method name and parse the rest of the method.
You can read more about query construction in &#8220;<a href="#repositories.query-methods.query-creation">Query Creation</a>&#8221;.</p>
</li>
<li>
<p><code>USE_DECLARED_QUERY</code> tries to find a declared query and throws an exception if it cannot find one.
The query can be defined by an annotation somewhere or declared by other means.
See the documentation of the specific store to find available options for that store.
If the repository infrastructure does not find a declared query for the method at bootstrap time, it fails.</p>
</li>
<li>
<p><code>CREATE_IF_NOT_FOUND</code> (the default) combines <code>CREATE</code> and <code>USE_DECLARED_QUERY</code>.
It looks up a declared query first, and, if no declared query is found, it creates a custom method name-based query.
This is the default lookup strategy and, thus, is used if you do not configure anything explicitly.
It allows quick query definition by method names but also custom-tuning of these queries by introducing declared queries as needed.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-creation"><a class="anchor" href="#repositories.query-methods.query-creation"></a>4.4.2. Query Creation</h4>
<div class="paragraph">
<p>The query builder mechanism built into the Spring Data repository infrastructure is useful for building constraining queries over entities of the repository.</p>
</div>
<div class="paragraph">
<p>The following example shows how to create a number of queries:</p>
</div>
<div class="exampleblock">
<div class="title">Example 11. Query creation from method names</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface PersonRepository extends Repository&lt;Person, Long&gt; {

  List&lt;Person&gt; findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);

  // Enables the distinct flag for the query
  List&lt;Person&gt; findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);
  List&lt;Person&gt; findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);

  // Enabling ignoring case for an individual property
  List&lt;Person&gt; findByLastnameIgnoreCase(String lastname);
  // Enabling ignoring case for all suitable properties
  List&lt;Person&gt; findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);

  // Enabling static ORDER BY for a query
  List&lt;Person&gt; findByLastnameOrderByFirstnameAsc(String lastname);
  List&lt;Person&gt; findByLastnameOrderByFirstnameDesc(String lastname);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Parsing query method names is divided into subject and predicate.
The first part (<code>find…By</code>, <code>exists…By</code>) defines the subject of the query, the second part forms the predicate.
The introducing clause (subject) can contain further expressions.
Any text between <code>find</code> (or other introducing keywords) and <code>By</code> is considered to be descriptive unless using one of the result-limiting keywords such as a <code>Distinct</code> to set a distinct flag on the query to be created or <a href="#repositories.limit-query-result"><code>Top</code>/<code>First</code> to limit query results</a>.</p>
</div>
<div class="paragraph">
<p>The appendix contains the <a href="#appendix.query.method.subject">full list of query method subject keywords</a> and <a href="#appendix.query.method.predicate">query method predicate keywords including sorting and letter-casing modifiers</a>.
However, the first <code>By</code> acts as a delimiter to indicate the start of the actual criteria predicate.
At a very basic level, you can define conditions on entity properties and concatenate them with <code>And</code> and <code>Or</code>.</p>
</div>
<div class="paragraph">
<p>The actual result of parsing the method depends on the persistence store for which you create the query.
However, there are some general things to notice:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The expressions are usually property traversals combined with operators that can be concatenated.
You can combine property expressions with <code>AND</code> and <code>OR</code>.
You also get support for operators such as <code>Between</code>, <code>LessThan</code>, <code>GreaterThan</code>, and <code>Like</code> for the property expressions.
The supported operators can vary by datastore, so consult the appropriate part of your reference documentation.</p>
</li>
<li>
<p>The method parser supports setting an <code>IgnoreCase</code> flag for individual properties (for example, <code>findByLastnameIgnoreCase(…)</code>) or for all properties of a type that supports ignoring case (usually <code>String</code> instances&#8201;&#8212;&#8201;for example, <code>findByLastnameAndFirstnameAllIgnoreCase(…)</code>).
Whether ignoring cases is supported may vary by store, so consult the relevant sections in the reference documentation for the store-specific query method.</p>
</li>
<li>
<p>You can apply static ordering by appending an <code>OrderBy</code> clause to the query method that references a property and by providing a sorting direction (<code>Asc</code> or <code>Desc</code>).
To create a query method that supports dynamic sorting, see &#8220;<a href="#repositories.special-parameters">Special parameter handling</a>&#8221;.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-methods.query-property-expressions"><a class="anchor" href="#repositories.query-methods.query-property-expressions"></a>4.4.3. Property Expressions</h4>
<div class="paragraph">
<p>Property expressions can refer only to a direct property of the managed entity, as shown in the preceding example.
At query creation time, you already make sure that the parsed property is a property of the managed domain class.
However, you can also define constraints by traversing nested properties.
Consider the following method signature:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">List&lt;Person&gt; findByAddressZipCode(ZipCode zipCode);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Assume a <code>Person</code> has an <code>Address</code> with a <code>ZipCode</code>.
In that case, the method creates the <code>x.address.zipCode</code> property traversal.
The resolution algorithm starts by interpreting the entire part (<code>AddressZipCode</code>) as the property and checks the domain class for a property with that name (uncapitalized).
If the algorithm succeeds, it uses that property.
If not, the algorithm splits up the source at the camel-case parts from the right side into a head and a tail and tries to find the corresponding property&#8201;&#8212;&#8201;in our example, <code>AddressZip</code> and <code>Code</code>.
If the algorithm finds a property with that head, it takes the tail and continues building the tree down from there, splitting the tail up in the way just described.
If the first split does not match, the algorithm moves the split point to the left (<code>Address</code>, <code>ZipCode</code>) and continues.</p>
</div>
<div class="paragraph">
<p>Although this should work for most cases, it is possible for the algorithm to select the wrong property.
Suppose the <code>Person</code> class has an <code>addressZip</code> property as well.
The algorithm would match in the first split round already, choose the wrong property, and fail (as the type of <code>addressZip</code> probably has no <code>code</code> property).</p>
</div>
<div class="paragraph">
<p>To resolve this ambiguity you can use <code>_</code> inside your method name to manually define traversal points.
So our method name would be as follows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">List&lt;Person&gt; findByAddress_ZipCode(ZipCode zipCode);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Because we treat the underscore character as a reserved character, we strongly advise following standard Java naming conventions (that is, not using underscores in property names but using camel case instead).</p>
</div>
</div>
<div class="sect3">
<h4 id="repositories.special-parameters"><a class="anchor" href="#repositories.special-parameters"></a>4.4.4. Special parameter handling</h4>
<div class="paragraph">
<p>To handle parameters in your query, define method parameters as already seen in the preceding examples.
Besides that, the infrastructure recognizes certain specific types like <code>Pageable</code> and <code>Sort</code>, to apply pagination and sorting to your queries dynamically.
The following example demonstrates these features:</p>
</div>
<div class="exampleblock">
<div class="title">Example 12. Using <code>Pageable</code>, <code>Slice</code>, and <code>Sort</code> in query methods</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Page&lt;User&gt; findByLastname(String lastname, Pageable pageable);

Slice&lt;User&gt; findByLastname(String lastname, Pageable pageable);

List&lt;User&gt; findByLastname(String lastname, Sort sort);

List&lt;User&gt; findByLastname(String lastname, Pageable pageable);</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
APIs taking <code>Sort</code> and <code>Pageable</code> expect non-<code>null</code> values to be handed into methods.
If you do not want to apply any sorting or pagination, use <code>Sort.unsorted()</code> and <code>Pageable.unpaged()</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The first method lets you pass an <code>org.springframework.data.domain.Pageable</code> instance to the query method to dynamically add paging to your statically defined query.
A <code>Page</code> knows about the total number of elements and pages available.
It does so by the infrastructure triggering a count query to calculate the overall number.
As this might be expensive (depending on the store used), you can instead return a <code>Slice</code>.
A <code>Slice</code> knows only about whether a next <code>Slice</code> is available, which might be sufficient when walking through a larger result set.</p>
</div>
<div class="paragraph">
<p>Sorting options are handled through the <code>Pageable</code> instance, too.
If you need only sorting, add an <code>org.springframework.data.domain.Sort</code> parameter to your method.
As you can see, returning a <code>List</code> is also possible.
In this case, the additional metadata required to build the actual <code>Page</code> instance is not created (which, in turn, means that the additional count query that would have been necessary is not issued).
Rather, it restricts the query to look up only the given range of entities.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
To find out how many pages you get for an entire query, you have to trigger an additional count query.
By default, this query is derived from the query you actually trigger.
</td>
</tr>
</table>
</div>
<div class="sect4">
<h5 id="repositories.paging-and-sorting"><a class="anchor" href="#repositories.paging-and-sorting"></a>Paging and Sorting</h5>
<div class="paragraph">
<p>You can define simple sorting expressions by using property names.
You can concatenate expressions to collect multiple criteria into one expression.</p>
</div>
<div class="exampleblock">
<div class="title">Example 13. Defining sort expressions</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Sort sort = Sort.by("firstname").ascending()
  .and(Sort.by("lastname").descending());</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>For a more type-safe way to define sort expressions, start with the type for which to define the sort expression and use method references to define the properties on which to sort.</p>
</div>
<div class="exampleblock">
<div class="title">Example 14. Defining sort expressions by using the type-safe API</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">TypedSort&lt;Person&gt; person = Sort.sort(Person.class);

Sort sort = person.by(Person::getFirstname).ascending()
  .and(person.by(Person::getLastname).descending());</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<code>TypedSort.by(…)</code> makes use of runtime proxies by (typically) using CGlib, which may interfere with native image compilation when using tools such as Graal VM Native.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If your store implementation supports Querydsl, you can also use the generated metamodel types to define sort expressions:</p>
</div>
<div class="exampleblock">
<div class="title">Example 15. Defining sort expressions by using the Querydsl API</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">QSort sort = QSort.by(QPerson.firstname.asc())
  .and(QSort.by(QPerson.lastname.desc()));</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.limit-query-result"><a class="anchor" href="#repositories.limit-query-result"></a>4.4.5. Limiting Query Results</h4>
<div class="paragraph">
<p>You can limit the results of query methods by using the <code>first</code> or <code>top</code> keywords, which you can use interchangeably.
You can append an optional numeric value to <code>top</code> or <code>first</code> to specify the maximum result size to be returned.
If the number is left out, a result size of 1 is assumed.
The following example shows how to limit the query size:</p>
</div>
<div class="exampleblock">
<div class="title">Example 16. Limiting the result size of a query with <code>Top</code> and <code>First</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">User findFirstByOrderByLastnameAsc();

User findTopByOrderByAgeDesc();

Page&lt;User&gt; queryFirst10ByLastname(String lastname, Pageable pageable);

Slice&lt;User&gt; findTop3ByLastname(String lastname, Pageable pageable);

List&lt;User&gt; findFirst10ByLastname(String lastname, Sort sort);

List&lt;User&gt; findTop10ByLastname(String lastname, Pageable pageable);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The limiting expressions also support the <code>Distinct</code> keyword for datastores that support distinct queries.
Also, for the queries that limit the result set to one instance, wrapping the result into with the <code>Optional</code> keyword is supported.</p>
</div>
<div class="paragraph">
<p>If pagination or slicing is applied to a limiting query pagination (and the calculation of the number of available pages), it is applied within the limited result.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Limiting the results in combination with dynamic sorting by using a <code>Sort</code> parameter lets you express query methods for the 'K' smallest as well as for the 'K' biggest elements.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.collections-and-iterables"><a class="anchor" href="#repositories.collections-and-iterables"></a>4.4.6. Repository Methods Returning Collections or Iterables</h4>
<div class="paragraph">
<p>Query methods that return multiple results can use standard Java <code>Iterable</code>, <code>List</code>, and <code>Set</code>.
Beyond that, we support returning Spring Data&#8217;s <code>Streamable</code>, a custom extension of <code>Iterable</code>, as well as collection types provided by <a href="https://www.vavr.io/">Vavr</a>.
Refer to the appendix explaining all possible <a href="#appendix.query.return.types">query method return types</a>.</p>
</div>
<div class="sect4">
<h5 id="repositories.collections-and-iterables.streamable"><a class="anchor" href="#repositories.collections-and-iterables.streamable"></a>Using Streamable as Query Method Return Type</h5>
<div class="paragraph">
<p>You can use <code>Streamable</code> as alternative to <code>Iterable</code> or any collection type.
It provides convenience methods to access a non-parallel <code>Stream</code> (missing from <code>Iterable</code>) and the ability to directly <code>….filter(…)</code> and <code>….map(…)</code> over the elements and concatenate the <code>Streamable</code> to others:</p>
</div>
<div class="exampleblock">
<div class="title">Example 17. Using Streamable to combine query method results</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface PersonRepository extends Repository&lt;Person, Long&gt; {
  Streamable&lt;Person&gt; findByFirstnameContaining(String firstname);
  Streamable&lt;Person&gt; findByLastnameContaining(String lastname);
}

Streamable&lt;Person&gt; result = repository.findByFirstnameContaining("av")
  .and(repository.findByLastnameContaining("ea"));</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="repositories.collections-and-iterables.streamable-wrapper"><a class="anchor" href="#repositories.collections-and-iterables.streamable-wrapper"></a>Returning Custom Streamable Wrapper Types</h5>
<div class="paragraph">
<p>Providing dedicated wrapper types for collections is a commonly used pattern to provide an API for a query result that returns multiple elements.
Usually, these types are used by invoking a repository method returning a collection-like type and creating an instance of the wrapper type manually.
You can avoid that additional step as Spring Data lets you use these wrapper types as query method return types if they meet the following criteria:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>The type implements <code>Streamable</code>.</p>
</li>
<li>
<p>The type exposes either a constructor or a static factory method named <code>of(…)</code> or <code>valueOf(…)</code> that takes <code>Streamable</code> as an argument.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>The following listing shows an example:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class Product {                                         <i class="conum" data-value="1"></i><b>(1)</b>
  MonetaryAmount getPrice() { … }
}

@RequiredArgsConstructor(staticName = "of")
class Products implements Streamable&lt;Product&gt; {         <i class="conum" data-value="2"></i><b>(2)</b>

  private final Streamable&lt;Product&gt; streamable;

  public MonetaryAmount getTotal() {                    <i class="conum" data-value="3"></i><b>(3)</b>
    return streamable.stream()
      .map(Priced::getPrice)
      .reduce(Money.of(0), MonetaryAmount::add);
  }


  @Override
  public Iterator&lt;Product&gt; iterator() {                 <i class="conum" data-value="4"></i><b>(4)</b>
    return streamable.iterator();
  }
}

interface ProductRepository implements Repository&lt;Product, Long&gt; {
  Products findAllByDescriptionContaining(String text); <i class="conum" data-value="5"></i><b>(5)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A <code>Product</code> entity that exposes API to access the product&#8217;s price.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A wrapper type for a <code>Streamable&lt;Product&gt;</code> that can be constructed by using <code>Products.of(…)</code> (factory method created with the Lombok annotation).
A standard constructor taking the <code>Streamable&lt;Product&gt;</code> will do as well.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The wrapper type exposes an additional API, calculating new values on the <code>Streamable&lt;Product&gt;</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Implement the <code>Streamable</code> interface and delegate to the actual result.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>That wrapper type <code>Products</code> can be used directly as a query method return type.
You do not need to return <code>Streamable&lt;Product&gt;</code> and manually wrap it after the query in the repository client.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="repositories.collections-and-iterables.vavr"><a class="anchor" href="#repositories.collections-and-iterables.vavr"></a>Support for Vavr Collections</h5>
<div class="paragraph">
<p><a href="https://www.vavr.io/">Vavr</a> is a library that embraces functional programming concepts in Java.
It ships with a custom set of collection types that you can use as query method return types, as the following table shows:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Vavr collection type</th>
<th class="tableblock halign-left valign-top">Used Vavr implementation type</th>
<th class="tableblock halign-left valign-top">Valid Java source types</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.Seq</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.List</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>java.util.Iterable</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.Set</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.LinkedHashSet</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>java.util.Iterable</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.Map</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>io.vavr.collection.LinkedHashMap</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>java.util.Map</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>You can use the types in the first column (or subtypes thereof) as query method return types and get the types in the second column used as implementation type, depending on the Java type of the actual query result (third column).
Alternatively, you can declare <code>Traversable</code> (the Vavr <code>Iterable</code> equivalent), and we then derive the implementation class from the actual return value.
That is, a <code>java.util.List</code> is turned into a Vavr <code>List</code> or <code>Seq</code>, a <code>java.util.Set</code> becomes a Vavr <code>LinkedHashSet</code> <code>Set</code>, and so on.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.nullability"><a class="anchor" href="#repositories.nullability"></a>4.4.7. Null Handling of Repository Methods</h4>
<div class="paragraph">
<p>As of Spring Data 2.0, repository CRUD methods that return an individual aggregate instance use Java 8&#8217;s <code>Optional</code> to indicate the potential absence of a value.
Besides that, Spring Data supports returning the following wrapper types on query methods:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>com.google.common.base.Optional</code></p>
</li>
<li>
<p><code>scala.Option</code></p>
</li>
<li>
<p><code>io.vavr.control.Option</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Alternatively, query methods can choose not to use a wrapper type at all.
The absence of a query result is then indicated by returning <code>null</code>.
Repository methods returning collections, collection alternatives, wrappers, and streams are guaranteed never to return <code>null</code> but rather the corresponding empty representation.
See &#8220;<a href="#repository-query-return-types">Repository query return types</a>&#8221; for details.</p>
</div>
<div class="sect4">
<h5 id="repositories.nullability.annotations"><a class="anchor" href="#repositories.nullability.annotations"></a>Nullability Annotations</h5>
<div class="paragraph">
<p>You can express nullability constraints for repository methods by using <a href="https://docs.spring.io/spring-framework/docs/5.3.11/reference/html/core.html#null-safety">Spring Framework&#8217;s nullability annotations</a>.
They provide a tooling-friendly approach and opt-in <code>null</code> checks during runtime, as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://docs.spring.io/spring/docs/5.3.11/javadoc-api/org/springframework/lang/NonNullApi.html"><code>@NonNullApi</code></a>: Used on the package level to declare that the default behavior for parameters and return values is, respectively, neither to accept nor to produce <code>null</code> values.</p>
</li>
<li>
<p><a href="https://docs.spring.io/spring/docs/5.3.11/javadoc-api/org/springframework/lang/NonNull.html"><code>@NonNull</code></a>: Used on a parameter or return value that must not be <code>null</code> (not needed on a parameter and return value where <code>@NonNullApi</code> applies).</p>
</li>
<li>
<p><a href="https://docs.spring.io/spring/docs/5.3.11/javadoc-api/org/springframework/lang/Nullable.html"><code>@Nullable</code></a>: Used on a parameter or return value that can be <code>null</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Spring annotations are meta-annotated with <a href="https://jcp.org/en/jsr/detail?id=305">JSR 305</a> annotations (a dormant but widely used JSR).
JSR 305 meta-annotations let tooling vendors (such as <a href="https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html">IDEA</a>, <a href="https://help.eclipse.org/oxygen/index.jsp?topic=/org.eclipse.jdt.doc.user/tasks/task-using_external_null_annotations.htm">Eclipse</a>, and <a href="https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types">Kotlin</a>) provide null-safety support in a generic way, without having to hard-code support for Spring annotations.
To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring’s <code>@NonNullApi</code> in <code>package-info.java</code>, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 18. Declaring Non-nullability in <code>package-info.java</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@org.springframework.lang.NonNullApi
package com.acme;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Once non-null defaulting is in place, repository query method invocations get validated at runtime for nullability constraints.
If a query result violates the defined constraint, an exception is thrown.
This happens when the method would return <code>null</code> but is declared as non-nullable (the default with the annotation defined on the package in which the repository resides).
If you want to opt-in to nullable results again, selectively use <code>@Nullable</code> on individual methods.
Using the result wrapper types mentioned at the start of this section continues to work as expected: an empty result is translated into the value that represents absence.</p>
</div>
<div class="paragraph">
<p>The following example shows a number of the techniques just described:</p>
</div>
<div class="exampleblock">
<div class="title">Example 19. Using different nullability constraints</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package com.acme;                                                       <i class="conum" data-value="1"></i><b>(1)</b>

import org.springframework.lang.Nullable;

interface UserRepository extends Repository&lt;User, Long&gt; {

  User getByEmailAddress(EmailAddress emailAddress);                    <i class="conum" data-value="2"></i><b>(2)</b>

  @Nullable
  User findByEmailAddress(@Nullable EmailAddress emailAdress);          <i class="conum" data-value="3"></i><b>(3)</b>

  Optional&lt;User&gt; findOptionalByEmailAddress(EmailAddress emailAddress); <i class="conum" data-value="4"></i><b>(4)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The repository resides in a package (or sub-package) for which we have defined non-null behavior.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Throws an <code>EmptyResultDataAccessException</code> when the query does not produce a result.
Throws an <code>IllegalArgumentException</code> when the <code>emailAddress</code> handed to the method is <code>null</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns <code>null</code> when the query does not produce a result.
Also accepts <code>null</code> as the value for <code>emailAddress</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Returns <code>Optional.empty()</code> when the query does not produce a result.
Throws an <code>IllegalArgumentException</code> when the <code>emailAddress</code> handed to the method is <code>null</code>.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="repositories.nullability.kotlin"><a class="anchor" href="#repositories.nullability.kotlin"></a>Nullability in Kotlin-based Repositories</h5>
<div class="paragraph">
<p>Kotlin has the definition of <a href="https://kotlinlang.org/docs/reference/null-safety.html">nullability constraints</a> baked into the language.
Kotlin code compiles to bytecode, which does not express nullability constraints through method signatures but rather through compiled-in metadata.
Make sure to include the <code>kotlin-reflect</code> JAR in your project to enable introspection of Kotlin&#8217;s nullability constraints.
Spring Data repositories use the language mechanism to define those constraints to apply the same runtime checks, as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 20. Using nullability constraints on Kotlin repositories</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="kotlin" class="language-kotlin hljs">interface UserRepository : Repository&lt;User, String&gt; {

  fun findByUsername(username: String): User     <i class="conum" data-value="1"></i><b>(1)</b>

  fun findByFirstname(firstname: String?): User? <i class="conum" data-value="2"></i><b>(2)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The method defines both the parameter and the result as non-nullable (the Kotlin default).
The Kotlin compiler rejects method invocations that pass <code>null</code> to the method.
If the query yields an empty result, an <code>EmptyResultDataAccessException</code> is thrown.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>This method accepts <code>null</code> for the <code>firstname</code> parameter and returns <code>null</code> if the query does not produce a result.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-streaming"><a class="anchor" href="#repositories.query-streaming"></a>4.4.8. Streaming Query Results</h4>
<div class="paragraph">
<p>You can process the results of query methods incrementally by using a Java 8 <code>Stream&lt;T&gt;</code> as the return type.
Instead of wrapping the query results in a <code>Stream</code>, data store-specific methods are used to perform the streaming, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 21. Stream the result of a query with Java 8 <code>Stream&lt;T&gt;</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Query("select u from User u")
Stream&lt;User&gt; findAllByCustomQueryAndStream();

Stream&lt;User&gt; readAllByFirstnameNotNull();

@Query("select u from User u")
Stream&lt;User&gt; streamAllPaged(Pageable pageable);</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
A <code>Stream</code> potentially wraps underlying data store-specific resources and must, therefore, be closed after usage.
You can either manually close the <code>Stream</code> by using the <code>close()</code> method or by using a Java 7 <code>try-with-resources</code> block, as shown in the following example:
</td>
</tr>
</table>
</div>
<div class="exampleblock">
<div class="title">Example 22. Working with a <code>Stream&lt;T&gt;</code> result in a <code>try-with-resources</code> block</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">try (Stream&lt;User&gt; stream = repository.findAllByCustomQueryAndStream()) {
  stream.forEach(…);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Not all Spring Data modules currently support <code>Stream&lt;T&gt;</code> as a return type.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.query-async"><a class="anchor" href="#repositories.query-async"></a>4.4.9. Asynchronous Query Results</h4>
<div class="paragraph">
<p>You can run repository queries asynchronously by using <a href="https://docs.spring.io/spring-framework/docs/5.3.11/reference/html/integration.html#scheduling">Spring&#8217;s asynchronous method running capability</a>.
This means the method returns immediately upon invocation while the actual query occurs in a task that has been submitted to a Spring <code>TaskExecutor</code>.
Asynchronous queries differ from reactive queries and should not be mixed.
See the store-specific documentation for more details on reactive support.
The following example shows a number of asynchronous queries:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Async
Future&lt;User&gt; findByFirstname(String firstname);               <i class="conum" data-value="1"></i><b>(1)</b>

@Async
CompletableFuture&lt;User&gt; findOneByFirstname(String firstname); <i class="conum" data-value="2"></i><b>(2)</b>

@Async
ListenableFuture&lt;User&gt; findOneByLastname(String lastname);    <i class="conum" data-value="3"></i><b>(3)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Use <code>java.util.concurrent.Future</code> as the return type.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Use a Java 8 <code>java.util.concurrent.CompletableFuture</code> as the return type.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Use a <code>org.springframework.util.concurrent.ListenableFuture</code> as the return type.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.create-instances"><a class="anchor" href="#repositories.create-instances"></a>4.5. Creating Repository Instances</h3>
<div class="paragraph">
<p>This section covers how to create instances and bean definitions for the defined repository interfaces. One way to do so is by using the Spring namespace that is shipped with each Spring Data module that supports the repository mechanism, although we generally recommend using Java configuration.</p>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.spring"><a class="anchor" href="#repositories.create-instances.spring"></a>4.5.1. XML Configuration</h4>
<div class="paragraph">
<p>Each Spring Data module includes a <code>repositories</code> element that lets you define a base package that Spring scans for you, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 23. Enabling Spring Data repositories via XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/data/jpa"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/jpa
    https://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;

  &lt;repositories base-package="com.acme.repositories" /&gt;

&lt;/beans:beans&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In the preceding example, Spring is instructed to scan <code>com.acme.repositories</code> and all its sub-packages for interfaces extending <code>Repository</code> or one of its sub-interfaces.
For each interface found, the infrastructure registers the persistence technology-specific <code>FactoryBean</code> to create the appropriate proxies that handle invocations of the query methods.
Each bean is registered under a bean name that is derived from the interface name, so an interface of <code>UserRepository</code> would be registered under <code>userRepository</code>.
Bean names for nested repository interfaces are prefixed with their enclosing type name.
The <code>base-package</code> attribute allows wildcards so that you can define a pattern of scanned packages.</p>
</div>
<div class="sect4">
<h5 id="repositories.using-filters"><a class="anchor" href="#repositories.using-filters"></a>Using Filters</h5>
<div class="paragraph">
<p>By default, the infrastructure picks up every interface that extends the persistence technology-specific <code>Repository</code> sub-interface located under the configured base package and creates a bean instance for it.
However, you might want more fine-grained control over which interfaces have bean instances created for them.
To do so, use <code>&lt;include-filter /&gt;</code> and <code>&lt;exclude-filter /&gt;</code> elements inside the <code>&lt;repositories /&gt;</code> element.
The semantics are exactly equivalent to the elements in Spring&#8217;s context namespace.
For details, see the <a href="https://docs.spring.io/spring-framework/docs/5.3.11/reference/html/core.html#beans-scanning-filters">Spring reference documentation</a> for these elements.</p>
</div>
<div class="paragraph">
<p>For example, to exclude certain interfaces from instantiation as repository beans, you could use the following configuration:</p>
</div>
<div class="exampleblock">
<div class="title">Example 24. Using exclude-filter element</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;repositories base-package="com.acme.repositories"&gt;
  &lt;context:exclude-filter type="regex" expression=".*SomeRepository" /&gt;
&lt;/repositories&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding example excludes all interfaces ending in <code>SomeRepository</code> from being instantiated.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.java-config"><a class="anchor" href="#repositories.create-instances.java-config"></a>4.5.2. Java Configuration</h4>
<div class="paragraph">
<p>You can also trigger the repository infrastructure by using a store-specific <code>@Enable${store}Repositories</code> annotation on a Java configuration class. For an introduction to Java-based configuration of the Spring container, see <a href="https://docs.spring.io/spring-framework/docs/5.3.11/reference/html/core.html#beans-java">JavaConfig in the Spring reference documentation</a>.</p>
</div>
<div class="paragraph">
<p>A sample configuration to enable Spring Data repositories resembles the following:</p>
</div>
<div class="exampleblock">
<div class="title">Example 25. Sample annotation-based repository configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
@EnableJpaRepositories("com.acme.repositories")
class ApplicationConfiguration {

  @Bean
  EntityManagerFactory entityManagerFactory() {
    // …
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The preceding example uses the JPA-specific annotation, which you would change according to the store module you actually use. The same applies to the definition of the <code>EntityManagerFactory</code> bean. See the sections covering the store-specific configuration.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="repositories.create-instances.standalone"><a class="anchor" href="#repositories.create-instances.standalone"></a>4.5.3. Standalone Usage</h4>
<div class="paragraph">
<p>You can also use the repository infrastructure outside of a Spring container&#8201;&#8212;&#8201;for example, in CDI environments. You still need some Spring libraries in your classpath, but, generally, you can set up repositories programmatically as well. The Spring Data modules that provide repository support ship with a persistence technology-specific <code>RepositoryFactory</code> that you can use, as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 26. Standalone usage of the repository factory</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">RepositoryFactorySupport factory = … // Instantiate factory here
UserRepository repository = factory.getRepository(UserRepository.class);</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="repositories.custom-implementations"><a class="anchor" href="#repositories.custom-implementations"></a>4.6. Custom Implementations for Spring Data Repositories</h3>
<div class="paragraph">
<p>Spring Data provides various options to create query methods with little coding.
But when those options don&#8217;t fit your needs you can also provide your own custom implementation for repository methods.
This section describes how to do that.</p>
</div>
<div class="sect3">
<h4 id="repositories.single-repository-behavior"><a class="anchor" href="#repositories.single-repository-behavior"></a>4.6.1. Customizing Individual Repositories</h4>
<div class="paragraph">
<p>To enrich a repository with custom functionality, you must first define a fragment interface and an implementation for the custom functionality, as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 27. Interface for custom repository functionality</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface CustomizedUserRepository {
  void someCustomMethod(User user);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 28. Implementation of custom repository functionality</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  public void someCustomMethod(User user) {
    // Your custom implementation
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The most important part of the class name that corresponds to the fragment interface is the <code>Impl</code> postfix.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The implementation itself does not depend on Spring Data and can be a regular Spring bean.Consequently, you can use standard dependency injection behavior to inject references to other beans (such as a <code>JdbcTemplate</code>), take part in aspects, and so on.</p>
</div>
<div class="paragraph">
<p>Then you can let your repository interface extend the fragment interface, as follows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 29. Changes to your repository interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface UserRepository extends CrudRepository&lt;User, Long&gt;, CustomizedUserRepository {

  // Declare query methods here
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Extending the fragment interface with your repository interface combines the CRUD and custom functionality and makes it available to clients.</p>
</div>
<div class="paragraph">
<p>Spring Data repositories are implemented by using fragments that form a repository composition. Fragments are the base repository, functional aspects (such as <a href="#core.extensions.querydsl">QueryDsl</a>), and custom interfaces along with their implementations. Each time you add an interface to your repository interface, you enhance the composition by adding a fragment. The base repository and repository aspect implementations are provided by each Spring Data module.</p>
</div>
<div class="paragraph">
<p>The following example shows custom interfaces and their implementations:</p>
</div>
<div class="exampleblock">
<div class="title">Example 30. Fragments with their implementations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface HumanRepository {
  void someHumanMethod(User user);
}

class HumanRepositoryImpl implements HumanRepository {

  public void someHumanMethod(User user) {
    // Your custom implementation
  }
}

interface ContactRepository {

  void someContactMethod(User user);

  User anotherContactMethod(User user);
}

class ContactRepositoryImpl implements ContactRepository {

  public void someContactMethod(User user) {
    // Your custom implementation
  }

  public User anotherContactMethod(User user) {
    // Your custom implementation
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows the interface for a custom repository that extends <code>CrudRepository</code>:</p>
</div>
<div class="exampleblock">
<div class="title">Example 31. Changes to your repository interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface UserRepository extends CrudRepository&lt;User, Long&gt;, HumanRepository, ContactRepository {

  // Declare query methods here
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Repositories may be composed of multiple custom implementations that are imported in the order of their declaration. Custom implementations have a higher priority than the base implementation and repository aspects. This ordering lets you override base repository and aspect methods and resolves ambiguity if two fragments contribute the same method signature. Repository fragments are not limited to use in a single repository interface. Multiple repositories may use a fragment interface, letting you reuse customizations across different repositories.</p>
</div>
<div class="paragraph">
<p>The following example shows a repository fragment and its implementation:</p>
</div>
<div class="exampleblock">
<div class="title">Example 32. Fragments overriding <code>save(…)</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface CustomizedSave&lt;T&gt; {
  &lt;S extends T&gt; S save(S entity);
}

class CustomizedSaveImpl&lt;T&gt; implements CustomizedSave&lt;T&gt; {

  public &lt;S extends T&gt; S save(S entity) {
    // Your custom implementation
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The following example shows a repository that uses the preceding repository fragment:</p>
</div>
<div class="exampleblock">
<div class="title">Example 33. Customized repository interfaces</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface UserRepository extends CrudRepository&lt;User, Long&gt;, CustomizedSave&lt;User&gt; {
}

interface PersonRepository extends CrudRepository&lt;Person, Long&gt;, CustomizedSave&lt;Person&gt; {
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="repositories.configuration"><a class="anchor" href="#repositories.configuration"></a>Configuration</h5>
<div class="paragraph">
<p>If you use namespace configuration, the repository infrastructure tries to autodetect custom implementation fragments by scanning for classes below the package in which it found a repository.
These classes need to follow the naming convention of appending the namespace element&#8217;s <code>repository-impl-postfix</code> attribute to the fragment interface name.
This postfix defaults to <code>Impl</code>.
The following example shows a repository that uses the default postfix and a repository that sets a custom value for the postfix:</p>
</div>
<div class="exampleblock">
<div class="title">Example 34. Configuration example</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;repositories base-package="com.acme.repository" /&gt;

&lt;repositories base-package="com.acme.repository" repository-impl-postfix="MyPostfix" /&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The first configuration in the preceding example tries to look up a class called <code>com.acme.repository.CustomizedUserRepositoryImpl</code> to act as a custom repository implementation.
The second example tries to look up <code>com.acme.repository.CustomizedUserRepositoryMyPostfix</code>.</p>
</div>
<div class="sect5">
<h6 id="repositories.single-repository-behaviour.ambiguity"><a class="anchor" href="#repositories.single-repository-behaviour.ambiguity"></a>Resolution of Ambiguity</h6>
<div class="paragraph">
<p>If multiple implementations with matching class names are found in different packages, Spring Data uses the bean names to identify which one to use.</p>
</div>
<div class="paragraph">
<p>Given the following two custom implementations for the <code>CustomizedUserRepository</code> shown earlier, the first implementation is used.
Its bean name is <code>customizedUserRepositoryImpl</code>, which matches that of the fragment interface (<code>CustomizedUserRepository</code>) plus the postfix <code>Impl</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 35. Resolution of ambiguous implementations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package com.acme.impl.one;

class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  // Your custom implementation
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package com.acme.impl.two;

@Component("specialCustomImpl")
class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  // Your custom implementation
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If you annotate the <code>UserRepository</code> interface with <code>@Component("specialCustom")</code>, the bean name plus <code>Impl</code> then matches the one defined for the repository implementation in <code>com.acme.impl.two</code>, and it is used instead of the first one.</p>
</div>
</div>
<div class="sect5">
<h6 id="repositories.manual-wiring"><a class="anchor" href="#repositories.manual-wiring"></a>Manual Wiring</h6>
<div class="paragraph">
<p>If your custom implementation uses annotation-based configuration and autowiring only, the preceding approach shown works well, because it is treated as any other Spring bean.
If your implementation fragment bean needs special wiring, you can declare the bean and name it according to the conventions described in the <a href="#repositories.single-repository-behaviour.ambiguity">preceding section</a>.
The infrastructure then refers to the manually defined bean definition by name instead of creating one itself.
The following example shows how to manually wire a custom implementation:</p>
</div>
<div class="exampleblock">
<div class="title">Example 36. Manual wiring of custom implementations</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;repositories base-package="com.acme.repository" /&gt;

&lt;beans:bean id="userRepositoryImpl" class="…"&gt;
  &lt;!-- further configuration --&gt;
&lt;/beans:bean&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="repositories.customize-base-repository"><a class="anchor" href="#repositories.customize-base-repository"></a>4.6.2. Customize the Base Repository</h4>
<div class="paragraph">
<p>The approach described in the <a href="#repositories.manual-wiring">preceding section</a> requires customization of each repository interfaces when you want to customize the base repository behavior so that all repositories are affected.
To instead change behavior for all repositories, you can create an implementation that extends the persistence technology-specific repository base class.
This class then acts as a custom base class for the repository proxies, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 37. Custom repository base class</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class MyRepositoryImpl&lt;T, ID&gt;
  extends SimpleJpaRepository&lt;T, ID&gt; {

  private final EntityManager entityManager;

  MyRepositoryImpl(JpaEntityInformation entityInformation,
                          EntityManager entityManager) {
    super(entityInformation, entityManager);

    // Keep the EntityManager around to used from the newly introduced methods.
    this.entityManager = entityManager;
  }

  @Transactional
  public &lt;S extends T&gt; S save(S entity) {
    // implementation goes here
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock caution">
<table>
<tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
The class needs to have a constructor of the super class which the store-specific repository factory implementation uses.
If the repository base class has multiple constructors, override the one taking an <code>EntityInformation</code> plus a store specific infrastructure object (such as an <code>EntityManager</code> or a template class).
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The final step is to make the Spring Data infrastructure aware of the customized repository base class.
In Java configuration, you can do so by using the <code>repositoryBaseClass</code> attribute of the <code>@Enable${store}Repositories</code> annotation, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 38. Configuring a custom repository base class using JavaConfig</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
@EnableJpaRepositories(repositoryBaseClass = MyRepositoryImpl.class)
class ApplicationConfiguration { … }</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>A corresponding attribute is available in the XML namespace, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 39. Configuring a custom repository base class using XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;repositories base-package="com.acme.repository"
     base-class="….MyRepositoryImpl" /&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="core.domain-events"><a class="anchor" href="#core.domain-events"></a>4.7. Publishing Events from Aggregate Roots</h3>
<div class="paragraph">
<p>Entities managed by repositories are aggregate roots.
In a Domain-Driven Design application, these aggregate roots usually publish domain events.
Spring Data provides an annotation called <code>@DomainEvents</code> that you can use on a method of your aggregate root to make that publication as easy as possible, as shown in the following example:</p>
</div>
<div class="exampleblock">
<div class="title">Example 40. Exposing domain events from an aggregate root</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class AnAggregateRoot {

    @DomainEvents <i class="conum" data-value="1"></i><b>(1)</b>
    Collection&lt;Object&gt; domainEvents() {
        // … return events you want to get published here
    }

    @AfterDomainEventPublication <i class="conum" data-value="2"></i><b>(2)</b>
    void callbackMethod() {
       // … potentially clean up domain events list
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The method that uses <code>@DomainEvents</code> can return either a single event instance or a collection of events.
It must not take any arguments.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>After all events have been published, we have a method annotated with <code>@AfterDomainEventPublication</code>.
You can use it to potentially clean the list of events to be published (among other uses).</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>The methods are called every time one of a Spring Data repository&#8217;s <code>save(…)</code>, <code>saveAll(…)</code>, <code>delete(…)</code> or <code>deleteAll(…)</code> methods are called.</p>
</div>
</div>
<div class="sect2">
<h3 id="core.extensions"><a class="anchor" href="#core.extensions"></a>4.8. Spring Data Extensions</h3>
<div class="paragraph">
<p>This section documents a set of Spring Data extensions that enable Spring Data usage in a variety of contexts.
Currently, most of the integration is targeted towards Spring MVC.</p>
</div>
<div class="sect3">
<h4 id="core.extensions.querydsl"><a class="anchor" href="#core.extensions.querydsl"></a>4.8.1. Querydsl Extension</h4>
<div class="paragraph">
<p><a href="http://www.querydsl.com/">Querydsl</a> is a framework that enables the construction of statically typed SQL-like queries through its fluent API.</p>
</div>
<div class="paragraph">
<p>Several Spring Data modules offer integration with Querydsl through <code>QuerydslPredicateExecutor</code>, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 41. QuerydslPredicateExecutor interface</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public interface QuerydslPredicateExecutor&lt;T&gt; {

  Optional&lt;T&gt; findById(Predicate predicate);  <i class="conum" data-value="1"></i><b>(1)</b>

  Iterable&lt;T&gt; findAll(Predicate predicate);   <i class="conum" data-value="2"></i><b>(2)</b>

  long count(Predicate predicate);            <i class="conum" data-value="3"></i><b>(3)</b>

  boolean exists(Predicate predicate);        <i class="conum" data-value="4"></i><b>(4)</b>

  // … more functionality omitted.
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Finds and returns a single entity matching the <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Finds and returns all entities matching the <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Returns the number of entities matching the <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Returns whether an entity that matches the <code>Predicate</code> exists.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>To use the Querydsl support, extend <code>QuerydslPredicateExecutor</code> on your repository interface, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 42. Querydsl integration on repositories</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface UserRepository extends CrudRepository&lt;User, Long&gt;, QuerydslPredicateExecutor&lt;User&gt; {
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding example lets you write type-safe queries by using Querydsl <code>Predicate</code> instances, as the following example shows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Predicate predicate = user.firstname.equalsIgnoreCase("dave")
	.and(user.lastname.startsWithIgnoreCase("mathews"));

userRepository.findAll(predicate);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="core.web"><a class="anchor" href="#core.web"></a>4.8.2. Web support</h4>
<div class="paragraph">
<p>Spring Data modules that support the repository programming model ship with a variety of web support.
The web related components require Spring MVC JARs to be on the classpath.
Some of them even provide integration with <a href="https://github.com/spring-projects/spring-hateoas">Spring HATEOAS</a>.
In general, the integration support is enabled by using the <code>@EnableSpringDataWebSupport</code> annotation in your JavaConfig configuration class, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 43. Enabling Spring Data web support</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
@EnableWebMvc
@EnableSpringDataWebSupport
class WebConfiguration {}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>@EnableSpringDataWebSupport</code> annotation registers a few components.
We discuss those later in this section.
It also detects Spring HATEOAS on the classpath and registers integration components (if present) for it as well.</p>
</div>
<div class="paragraph">
<p>Alternatively, if you use XML configuration, register either <code>SpringDataWebConfiguration</code> or <code>HateoasAwareSpringDataWebConfiguration</code> as Spring beans, as the following example shows (for <code>SpringDataWebConfiguration</code>):</p>
</div>
<div class="exampleblock">
<div class="title">Example 44. Enabling Spring Data web support in XML</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;bean class="org.springframework.data.web.config.SpringDataWebConfiguration" /&gt;

&lt;!-- If you use Spring HATEOAS, register this one *instead* of the former --&gt;
&lt;bean class="org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration" /&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="core.web.basic"><a class="anchor" href="#core.web.basic"></a>Basic Web Support</h5>
<div class="paragraph">
<p>The configuration shown in the <a href="#core.web">previous section</a> registers a few basic components:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <a href="#core.web.basic.domain-class-converter">Using the <code>DomainClassConverter</code> Class</a> to let Spring MVC resolve instances of repository-managed domain classes from request parameters or path variables.</p>
</li>
<li>
<p><a href="#core.web.basic.paging-and-sorting"><code>HandlerMethodArgumentResolver</code></a> implementations to let Spring MVC resolve <code>Pageable</code> and <code>Sort</code> instances from request parameters.</p>
</li>
<li>
<p><a href="#core.web.basic.jackson-mappers">Jackson Modules</a> to de-/serialize types like <code>Point</code> and <code>Distance</code>, or store specific ones, depending on the Spring Data Module used.</p>
</li>
</ul>
</div>
<div class="sect5">
<h6 id="core.web.basic.domain-class-converter"><a class="anchor" href="#core.web.basic.domain-class-converter"></a>Using the <code>DomainClassConverter</code> Class</h6>
<div class="paragraph">
<p>The <code>DomainClassConverter</code> class lets you use domain types in your Spring MVC controller method signatures directly so that you need not manually lookup the instances through the repository, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 45. A Spring MVC controller using domain types in method signatures</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Controller
@RequestMapping("/users")
class UserController {

  @RequestMapping("/{id}")
  String showUserForm(@PathVariable("id") User user, Model model) {

    model.addAttribute("user", user);
    return "userForm";
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The method receives a <code>User</code> instance directly, and no further lookup is necessary.
The instance can be resolved by letting Spring MVC convert the path variable into the <code>id</code> type of the domain class first and eventually access the instance through calling <code>findById(…)</code> on the repository instance registered for the domain type.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Currently, the repository has to implement <code>CrudRepository</code> to be eligible to be discovered for conversion.
</td>
</tr>
</table>
</div>
</div>
<div class="sect5">
<h6 id="core.web.basic.paging-and-sorting"><a class="anchor" href="#core.web.basic.paging-and-sorting"></a>HandlerMethodArgumentResolvers for Pageable and Sort</h6>
<div class="paragraph">
<p>The configuration snippet shown in the <a href="#core.web.basic.domain-class-converter">previous section</a> also registers a <code>PageableHandlerMethodArgumentResolver</code> as well as an instance of <code>SortHandlerMethodArgumentResolver</code>.
The registration enables <code>Pageable</code> and <code>Sort</code> as valid controller method arguments, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 46. Using Pageable as a controller method argument</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Controller
@RequestMapping("/users")
class UserController {

  private final UserRepository repository;

  UserController(UserRepository repository) {
    this.repository = repository;
  }

  @RequestMapping
  String showUsers(Model model, Pageable pageable) {

    model.addAttribute("users", repository.findAll(pageable));
    return "users";
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding method signature causes Spring MVC try to derive a <code>Pageable</code> instance from the request parameters by using the following default configuration:</p>
</div>
<table class="tableblock frame-all grid-all fit-content">
<caption class="title">Table 1. Request parameters evaluated for <code>Pageable</code> instances</caption>
<colgroup>
<col>
<col>
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>page</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Page you want to retrieve. 0-indexed and defaults to 0.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>size</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Size of the page you want to retrieve. Defaults to 20.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>sort</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Properties that should be sorted by in the format <code>property,property(,ASC|DESC)(,IgnoreCase)</code>. The default sort direction is case-sensitive ascending. Use multiple <code>sort</code> parameters if you want to switch direction or case sensitivity&#8201;&#8212;&#8201;for example, <code>?sort=firstname&amp;sort=lastname,asc&amp;sort=city,ignorecase</code>.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>To customize this behavior, register a bean that implements the <code>PageableHandlerMethodArgumentResolverCustomizer</code> interface or the <code>SortHandlerMethodArgumentResolverCustomizer</code> interface, respectively.
Its <code>customize()</code> method gets called, letting you change settings, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Bean SortHandlerMethodArgumentResolverCustomizer sortCustomizer() {
    return s -&gt; s.setPropertyDelimiter("&lt;--&gt;");
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>If setting the properties of an existing <code>MethodArgumentResolver</code> is not sufficient for your purpose, extend either <code>SpringDataWebConfiguration</code> or the HATEOAS-enabled equivalent, override the <code>pageableResolver()</code> or <code>sortResolver()</code> methods, and import your customized configuration file instead of using the <code>@Enable</code> annotation.</p>
</div>
<div class="paragraph">
<p>If you need multiple <code>Pageable</code> or <code>Sort</code> instances to be resolved from the request (for multiple tables, for example), you can use Spring&#8217;s <code>@Qualifier</code> annotation to distinguish one from another.
The request parameters then have to be prefixed with <code>${qualifier}_</code>.
The following example shows the resulting method signature:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">String showUsers(Model model,
      @Qualifier("thing1") Pageable first,
      @Qualifier("thing2") Pageable second) { … }</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You have to populate <code>thing1_page</code>, <code>thing2_page</code>, and so on.</p>
</div>
<div class="paragraph">
<p>The default <code>Pageable</code> passed into the method is equivalent to a <code>PageRequest.of(0, 20)</code>, but you can customize it by using the <code>@PageableDefault</code> annotation on the <code>Pageable</code> parameter.</p>
</div>
</div>
</div>
<div class="sect4">
<h5 id="core.web.pageables"><a class="anchor" href="#core.web.pageables"></a>Hypermedia Support for Pageables</h5>
<div class="paragraph">
<p>Spring HATEOAS ships with a representation model class (<code>PagedResources</code>) that allows enriching the content of a <code>Page</code> instance with the necessary <code>Page</code> metadata as well as links to let the clients easily navigate the pages.
The conversion of a <code>Page</code> to a <code>PagedResources</code> is done by an implementation of the Spring HATEOAS <code>ResourceAssembler</code> interface, called the <code>PagedResourcesAssembler</code>.
The following example shows how to use a <code>PagedResourcesAssembler</code> as a controller method argument:</p>
</div>
<div class="exampleblock">
<div class="title">Example 47. Using a PagedResourcesAssembler as controller method argument</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Controller
class PersonController {

  @Autowired PersonRepository repository;

  @RequestMapping(value = "/persons", method = RequestMethod.GET)
  HttpEntity&lt;PagedResources&lt;Person&gt;&gt; persons(Pageable pageable,
    PagedResourcesAssembler assembler) {

    Page&lt;Person&gt; persons = repository.findAll(pageable);
    return new ResponseEntity&lt;&gt;(assembler.toResources(persons), HttpStatus.OK);
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Enabling the configuration, as shown in the preceding example, lets the <code>PagedResourcesAssembler</code> be used as a controller method argument.
Calling <code>toResources(…)</code> on it has the following effects:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The content of the <code>Page</code> becomes the content of the <code>PagedResources</code> instance.</p>
</li>
<li>
<p>The <code>PagedResources</code> object gets a <code>PageMetadata</code> instance attached, and it is populated with information from the <code>Page</code> and the underlying <code>PageRequest</code>.</p>
</li>
<li>
<p>The <code>PagedResources</code> may get <code>prev</code> and <code>next</code> links attached, depending on the page&#8217;s state.
The links point to the URI to which the method maps.
The pagination parameters added to the method match the setup of the <code>PageableHandlerMethodArgumentResolver</code> to make sure the links can be resolved later.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Assume we have 30 <code>Person</code> instances in the database.
You can now trigger a request (<code>GET <a href="http://localhost:8080/persons" class="bare">http://localhost:8080/persons</a></code>) and see output similar to the following:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="javascript" class="language-javascript hljs">{ "links" : [ { "rel" : "next",
                "href" : "http://localhost:8080/persons?page=1&amp;size=20" }
  ],
  "content" : [
     … // 20 Person instances rendered here
  ],
  "pageMetadata" : {
    "size" : 20,
    "totalElements" : 30,
    "totalPages" : 2,
    "number" : 0
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The assembler produced the correct URI and also picked up the default configuration to resolve the parameters into a <code>Pageable</code> for an upcoming request.
This means that, if you change that configuration, the links automatically adhere to the change.
By default, the assembler points to the controller method it was invoked in, but you can customize that by passing a custom <code>Link</code> to be used as base to build the pagination links, which overloads the <code>PagedResourcesAssembler.toResource(…)</code> method.</p>
</div>
</div>
<div class="sect4">
<h5 id="core.web.basic.jackson-mappers"><a class="anchor" href="#core.web.basic.jackson-mappers"></a>Spring Data Jackson Modules</h5>
<div class="paragraph">
<p>The core module, and some of the store specific ones, ship with a set of Jackson Modules for types, like <code>org.springframework.data.geo.Distance</code> and <code>org.springframework.data.geo.Point</code>, used by the Spring Data domain.<br>
Those Modules are imported once <a href="#core.web">web support</a> is enabled and <code>com.fasterxml.jackson.databind.ObjectMapper</code> is available.</p>
</div>
<div class="paragraph">
<p>During initialization <code>SpringDataJacksonModules</code>, like the <code>SpringDataJacksonConfiguration</code>, get picked up by the infrastructure, so that the declared <code>com.fasterxml.jackson.databind.Module</code>s are made available to the Jackson <code>ObjectMapper</code>.</p>
</div>
<div class="paragraph">
<p>Data binding mixins for the following domain types are registered by the common infrastructure.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>org.springframework.data.geo.Distance
org.springframework.data.geo.Point
org.springframework.data.geo.Box
org.springframework.data.geo.Circle
org.springframework.data.geo.Polygon</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The individual module may provide additional <code>SpringDataJacksonModules</code>.<br>
Please refer to the store specific section for more details.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect4">
<h5 id="core.web.binding"><a class="anchor" href="#core.web.binding"></a>Web Databinding Support</h5>
<div class="paragraph">
<p>You can use Spring Data projections (described in <a href="#projections">[projections]</a>) to bind incoming request payloads by using either <a href="https://goessner.net/articles/JsonPath/">JSONPath</a> expressions (requires <a href="https://github.com/json-path/JsonPath">Jayway JsonPath</a> or <a href="https://www.w3.org/TR/xpath-31/">XPath</a> expressions (requires <a href="https://xmlbeam.org/">XmlBeam</a>), as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 48. HTTP payload binding using JSONPath or XPath expressions</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@ProjectedPayload
public interface UserPayload {

  @XBRead("//firstname")
  @JsonPath("$..firstname")
  String getFirstname();

  @XBRead("/lastname")
  @JsonPath({ "$.lastname", "$.user.lastname" })
  String getLastname();
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You can use the type shown in the preceding example as a Spring MVC handler method argument or by using <code>ParameterizedTypeReference</code> on one of methods of the <code>RestTemplate</code>.
The preceding method declarations would try to find <code>firstname</code> anywhere in the given document.
The <code>lastname</code> XML lookup is performed on the top-level of the incoming document.
The JSON variant of that tries a top-level <code>lastname</code> first but also tries <code>lastname</code> nested in a <code>user</code> sub-document if the former does not return a value.
That way, changes in the structure of the source document can be mitigated easily without having clients calling the exposed methods (usually a drawback of class-based payload binding).</p>
</div>
<div class="paragraph">
<p>Nested projections are supported as described in <a href="#projections">[projections]</a>.
If the method returns a complex, non-interface type, a Jackson <code>ObjectMapper</code> is used to map the final value.</p>
</div>
<div class="paragraph">
<p>For Spring MVC, the necessary converters are registered automatically as soon as <code>@EnableSpringDataWebSupport</code> is active and the required dependencies are available on the classpath.
For usage with <code>RestTemplate</code>, register a <code>ProjectingJackson2HttpMessageConverter</code> (JSON) or <code>XmlBeamHttpMessageConverter</code> manually.</p>
</div>
<div class="paragraph">
<p>For more information, see the <a href="https://github.com/spring-projects/spring-data-examples/tree/master/web/projection">web projection example</a> in the canonical <a href="https://github.com/spring-projects/spring-data-examples">Spring Data Examples repository</a>.</p>
</div>
</div>
<div class="sect4">
<h5 id="core.web.type-safe"><a class="anchor" href="#core.web.type-safe"></a>Querydsl Web Support</h5>
<div class="paragraph">
<p>For those stores that have <a href="http://www.querydsl.com/">QueryDSL</a> integration, you can derive queries from the attributes contained in a <code>Request</code> query string.</p>
</div>
<div class="paragraph">
<p>Consider the following query string:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="text" class="language-text hljs">?firstname=Dave&amp;lastname=Matthews</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Given the <code>User</code> object from the previous examples, you can resolve a query string to the following value by using the <code>QuerydslPredicateArgumentResolver</code>, as follows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="text" class="language-text hljs">QUser.user.firstname.eq("Dave").and(QUser.user.lastname.eq("Matthews"))</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The feature is automatically enabled, along with <code>@EnableSpringDataWebSupport</code>, when Querydsl is found on the classpath.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Adding a <code>@QuerydslPredicate</code> to the method signature provides a ready-to-use <code>Predicate</code>, which you can run by using the <code>QuerydslPredicateExecutor</code>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
Type information is typically resolved from the method&#8217;s return type.
Since that information does not necessarily match the domain type, it might be a good idea to use the <code>root</code> attribute of <code>QuerydslPredicate</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The following example shows how to use <code>@QuerydslPredicate</code> in a method signature:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Controller
class UserController {

  @Autowired UserRepository repository;

  @RequestMapping(value = "/", method = RequestMethod.GET)
  String index(Model model, @QuerydslPredicate(root = User.class) Predicate predicate,    <i class="conum" data-value="1"></i><b>(1)</b>
          Pageable pageable, @RequestParam MultiValueMap&lt;String, String&gt; parameters) {

    model.addAttribute("users", repository.findAll(predicate, pageable));

    return "index";
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Resolve query string arguments to matching <code>Predicate</code> for <code>User</code>.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>The default binding is as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Object</code> on simple properties as <code>eq</code>.</p>
</li>
<li>
<p><code>Object</code> on collection like properties as <code>contains</code>.</p>
</li>
<li>
<p><code>Collection</code> on simple properties as <code>in</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can customize those bindings through the <code>bindings</code> attribute of <code>@QuerydslPredicate</code> or by making use of Java 8 <code>default methods</code> and adding the <code>QuerydslBinderCustomizer</code> method to the repository interface, as follows:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface UserRepository extends CrudRepository&lt;User, String&gt;,
                                 QuerydslPredicateExecutor&lt;User&gt;,                <i class="conum" data-value="1"></i><b>(1)</b>
                                 QuerydslBinderCustomizer&lt;QUser&gt; {               <i class="conum" data-value="2"></i><b>(2)</b>

  @Override
  default void customize(QuerydslBindings bindings, QUser user) {

    bindings.bind(user.username).first((path, value) -&gt; path.contains(value))    <i class="conum" data-value="3"></i><b>(3)</b>
    bindings.bind(String.class)
      .first((StringPath path, String value) -&gt; path.containsIgnoreCase(value)); <i class="conum" data-value="4"></i><b>(4)</b>
    bindings.excluding(user.password);                                           <i class="conum" data-value="5"></i><b>(5)</b>
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>QuerydslPredicateExecutor</code> provides access to specific finder methods for <code>Predicate</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>QuerydslBinderCustomizer</code> defined on the repository interface is automatically picked up and shortcuts <code>@QuerydslPredicate(bindings=&#8230;&#8203;)</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Define the binding for the <code>username</code> property to be a simple <code>contains</code> binding.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Define the default binding for <code>String</code> properties to be a case-insensitive <code>contains</code> match.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Exclude the <code>password</code> property from <code>Predicate</code> resolution.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
You can register a <code>QuerydslBinderCustomizerDefaults</code> bean holding default Querydsl bindings before applying specific bindings from the repository or <code>@QuerydslPredicate</code>.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect3">
<h4 id="core.repository-populators"><a class="anchor" href="#core.repository-populators"></a>4.8.3. Repository Populators</h4>
<div class="paragraph">
<p>If you work with the Spring JDBC module, you are probably familiar with the support for populating a <code>DataSource</code> with SQL scripts.
A similar abstraction is available on the repositories level, although it does not use SQL as the data definition language because it must be store-independent.
Thus, the populators support XML (through Spring&#8217;s OXM abstraction) and JSON (through Jackson) to define data with which to populate the repositories.</p>
</div>
<div class="paragraph">
<p>Assume you have a file called <code>data.json</code> with the following content:</p>
</div>
<div class="exampleblock">
<div class="title">Example 49. Data defined in JSON</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="javascript" class="language-javascript hljs">[ { "_class" : "com.acme.Person",
 "firstname" : "Dave",
  "lastname" : "Matthews" },
  { "_class" : "com.acme.Person",
 "firstname" : "Carter",
  "lastname" : "Beauford" } ]</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You can populate your repositories by using the populator elements of the repository namespace provided in Spring Data Commons.
To populate the preceding data to your <code>PersonRepository</code>, declare a populator similar to the following:</p>
</div>
<div class="exampleblock">
<div class="title">Example 50. Declaring a Jackson repository populator</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:repository="http://www.springframework.org/schema/data/repository"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/repository
    https://www.springframework.org/schema/data/repository/spring-repository.xsd"&gt;

  &lt;repository:jackson2-populator locations="classpath:data.json" /&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The preceding declaration causes the <code>data.json</code> file to be read and deserialized by a Jackson <code>ObjectMapper</code>.</p>
</div>
<div class="paragraph">
<p>The type to which the JSON object is unmarshalled is determined by inspecting the <code>_class</code> attribute of the JSON document.
The infrastructure eventually selects the appropriate repository to handle the object that was deserialized.</p>
</div>
<div class="paragraph">
<p>To instead use XML to define the data the repositories should be populated with, you can use the <code>unmarshaller-populator</code> element.
You configure it to use one of the XML marshaller options available in Spring OXM. See the <a href="https://docs.spring.io/spring-framework/docs/5.3.11/reference/html/data-access.html#oxm">Spring reference documentation</a> for details.
The following example shows how to unmarshall a repository populator with JAXB:</p>
</div>
<div class="exampleblock">
<div class="title">Example 51. Declaring an unmarshalling repository populator (using JAXB)</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:repository="http://www.springframework.org/schema/data/repository"
  xmlns:oxm="http://www.springframework.org/schema/oxm"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/repository
    https://www.springframework.org/schema/data/repository/spring-repository.xsd
    http://www.springframework.org/schema/oxm
    https://www.springframework.org/schema/oxm/spring-oxm.xsd"&gt;

  &lt;repository:unmarshaller-populator locations="classpath:data.json"
    unmarshaller-ref="unmarshaller" /&gt;

  &lt;oxm:jaxb2-marshaller contextPath="com.acme" /&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h1 id="reference" class="sect0"><a class="anchor" href="#reference"></a>Reference Documentation</h1>
<div class="sect1">
<h2 id="elasticsearch.clients"><a class="anchor" href="#elasticsearch.clients"></a>5. Elasticsearch Clients</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This chapter illustrates configuration and usage of supported Elasticsearch client implementations.</p>
</div>
<div class="paragraph">
<p>Spring Data Elasticsearch operates upon an Elasticsearch client that is connected to a single Elasticsearch node or a cluster. Although the Elasticsearch Client can be used to work with the cluster, applications using Spring Data Elasticsearch normally use the higher level abstractions of <a href="#elasticsearch.operations">Elasticsearch Operations</a> and <a href="#elasticsearch.repositories">Elasticsearch Repositories</a>.</p>
</div>
<div class="sect2">
<h3 id="elasticsearch.clients.transport"><a class="anchor" href="#elasticsearch.clients.transport"></a>5.1. Transport Client</h3>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
The <code>TransportClient</code> is deprecated as of Elasticsearch 7 and will be removed in Elasticsearch 8. (<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html">see the Elasticsearch documentation</a>). Spring Data Elasticsearch will support the <code>TransportClient</code> as long as it is available in the used
Elasticsearch <a href="#elasticsearch.versions">version</a> but has deprecated the classes using it since version 4.0.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>We strongly recommend to use the <a href="#elasticsearch.clients.rest">High Level REST Client</a> instead of the <code>TransportClient</code>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 52. Transport Client</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class TransportClientConfig extends ElasticsearchConfigurationSupport {

    @Bean
    public Client elasticsearchClient() throws UnknownHostException {
        Settings settings = Settings.builder().put("cluster.name", "elasticsearch").build();        <i class="conum" data-value="1"></i><b>(1)</b>
        TransportClient client = new PreBuiltTransportClient(settings);
        client.addTransportAddress(new TransportAddress(InetAddress.getByName("127.0.0.1"), 9300)); <i class="conum" data-value="2"></i><b>(2)</b>
        return client;
    }

    @Bean(name = { "elasticsearchOperations", "elasticsearchTemplate" })
    public ElasticsearchTemplate elasticsearchTemplate() throws UnknownHostException {

		ElasticsearchTemplate template = new ElasticsearchTemplate(elasticsearchClient, elasticsearchConverter);
		template.setRefreshPolicy(refreshPolicy());                                                 <i class="conum" data-value="3"></i><b>(3)</b>

		return template;
    }
}

// ...

IndexRequest request = new IndexRequest("spring-data")
 .id(randomID())
 .source(someObject);

IndexResponse response = client.index(request);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>TransportClient</code> must be configured with the cluster name.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The host and port to connect the client to.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>the RefreshPolicy must be set in the <code>ElasticsearchTemplate</code> (override <code>refreshPolicy()</code> to not use the default)</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.clients.rest"><a class="anchor" href="#elasticsearch.clients.rest"></a>5.2. High Level REST Client</h3>
<div class="paragraph">
<p>The Java High Level REST Client is the default client of Elasticsearch, it provides a straight forward replacement for the <code>TransportClient</code> as it accepts and returns
the very same request/response objects and therefore depends on the Elasticsearch core project.
Asynchronous calls are operated upon a client managed thread pool and require a callback to be notified when the request is done.</p>
</div>
<div class="exampleblock">
<div class="title">Example 53. High Level REST Client</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class RestClientConfig extends AbstractElasticsearchConfiguration {

    @Override
    @Bean
    public RestHighLevelClient elasticsearchClient() {

        final ClientConfiguration clientConfiguration = ClientConfiguration.builder()  <i class="conum" data-value="1"></i><b>(1)</b>
            .connectedTo("localhost:9200")
            .build();

        return RestClients.create(clientConfiguration).rest();                         <i class="conum" data-value="2"></i><b>(2)</b>
    }
}

// ...

  @Autowired
  RestHighLevelClient highLevelClient;

  RestClient lowLevelClient = highLevelClient.lowLevelClient();                        <i class="conum" data-value="3"></i><b>(3)</b>

// ...

IndexRequest request = new IndexRequest("spring-data")
  .id(randomID())
  .source(singletonMap("feature", "high-level-rest-client"))
  .setRefreshPolicy(IMMEDIATE);

IndexResponse response = highLevelClient.index(request,RequestOptions.DEFAULT);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Use the builder to provide cluster addresses, set default <code>HttpHeaders</code> or enable SSL.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Create the RestHighLevelClient.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>It is also possible to obtain the <code>lowLevelRest()</code> client.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.clients.reactive"><a class="anchor" href="#elasticsearch.clients.reactive"></a>5.3. Reactive Client</h3>
<div class="paragraph">
<p>The <code>ReactiveElasticsearchClient</code> is a non official driver based on <code>WebClient</code>.
It uses the request/response objects provided by the Elasticsearch core project.
Calls are directly operated on the reactive stack, <strong>not</strong> wrapping async (thread pool bound) responses into reactive types.</p>
</div>
<div class="exampleblock">
<div class="title">Example 54. Reactive REST Client</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class ReactiveRestClientConfig extends AbstractReactiveElasticsearchConfiguration {

    @Override
    @Bean
    public ReactiveElasticsearchClient reactiveElasticsearchClient() {
        final ClientConfiguration clientConfiguration = ClientConfiguration.builder() <i class="conum" data-value="1"></i><b>(1)</b>
            .connectedTo("localhost:9200") //
            .build();
        return ReactiveRestClients.create(clientConfiguration);

    }
}
// ...

Mono&lt;IndexResponse&gt; response = client.index(request -&gt;

  request.index("spring-data")
    .id(randomID())
    .source(singletonMap("feature", "reactive-client"));
);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Use the builder to provide cluster addresses, set default <code>HttpHeaders</code> or enable SSL.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The ReactiveClient response, especially for search operations, is bound to the <code>from</code> (offset) &amp; <code>size</code> (limit) options of the request.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.clients.configuration"><a class="anchor" href="#elasticsearch.clients.configuration"></a>5.4. Client Configuration</h3>
<div class="paragraph">
<p>Client behaviour can be changed via the <code>ClientConfiguration</code> that allows to set options for SSL, connect and socket timeouts, headers and other parameters.</p>
</div>
<div class="exampleblock">
<div class="title">Example 55. Client Configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">HttpHeaders httpHeaders = new HttpHeaders();
httpHeaders.add("some-header", "on every request")                      <i class="conum" data-value="1"></i><b>(1)</b>

ClientConfiguration clientConfiguration = ClientConfiguration.builder()
  .connectedTo("localhost:9200", "localhost:9291")                      <i class="conum" data-value="2"></i><b>(2)</b>
  .usingSsl()                                                           <i class="conum" data-value="3"></i><b>(3)</b>
  .withProxy("localhost:8888")                                          <i class="conum" data-value="4"></i><b>(4)</b>
  .withPathPrefix("ela")                                                <i class="conum" data-value="5"></i><b>(5)</b>
  .withConnectTimeout(Duration.ofSeconds(5))                            <i class="conum" data-value="6"></i><b>(6)</b>
  .withSocketTimeout(Duration.ofSeconds(3))                             <i class="conum" data-value="7"></i><b>(7)</b>
  .withDefaultHeaders(defaultHeaders)                                   <i class="conum" data-value="8"></i><b>(8)</b>
  .withBasicAuth(username, password)                                    <i class="conum" data-value="9"></i><b>(9)</b>
  .withHeaders(() -&gt; {                                                  <i class="conum" data-value="10"></i><b>(10)</b>
    HttpHeaders headers = new HttpHeaders();
    headers.add("currentTime", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
    return headers;
  })
  .withWebClientConfigurer(webClient -&gt; {                               <i class="conum" data-value="11"></i><b>(11)</b>
    //...
    return webClient;
  })
  .withHttpClientConfigurer(clientBuilder -&gt; {                          <i class="conum" data-value="12"></i><b>(12)</b>
      //...
      return clientBuilder;
  })
  . // ... other options
  .build();</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Define default headers, if they need to be customized</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Use the builder to provide cluster addresses, set default <code>HttpHeaders</code> or enable SSL.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Optionally enable SSL.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Optionally set a proxy.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Optionally set a path prefix, mostly used when different clusters a behind some reverse proxy.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Set the connection timeout. Default is 10 sec.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Set the socket timeout. Default is 5 sec.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>Optionally set headers.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Add basic authentication.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>A <code>Supplier&lt;Header&gt;</code> function can be specified which is called every time before a request is sent to Elasticsearch - here, as an example, the current time is written in a header.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>for reactive setup a function configuring the <code>WebClient</code></td>
</tr>
<tr>
<td><i class="conum" data-value="12"></i><b>12</b></td>
<td>for non-reactive setup a function configuring the REST client</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Adding a Header supplier as shown in above example allows to inject headers that may change over the time, like authentication JWT tokens. If this is used in the reactive setup, the supplier function <strong>must not</strong> block!
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.clients.logging"><a class="anchor" href="#elasticsearch.clients.logging"></a>5.5. Client Logging</h3>
<div class="paragraph">
<p>To see what is actually sent to and received from the server <code>Request</code> / <code>Response</code> logging on the transport level needs
to be turned on as outlined in the snippet below.</p>
</div>
<div class="listingblock">
<div class="title">Enable transport layer logging</div>
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;logger name="org.springframework.data.elasticsearch.client.WIRE" level="trace"/&gt;</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The above applies to both the <code>RestHighLevelClient</code> and <code>ReactiveElasticsearchClient</code> when obtained via <code>RestClients</code> respectively <code>ReactiveRestClients</code>, is not available for the <code>TransportClient</code>.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="elasticsearch.mapping"><a class="anchor" href="#elasticsearch.mapping"></a>6. Elasticsearch Object Mapping</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data Elasticsearch Object Mapping is the process that maps a Java object - the domain entity - into the JSON representation that is stored in Elasticsearch and back.</p>
</div>
<div class="paragraph">
<p>Earlier versions of Spring Data Elasticsearch used a Jackson based conversion, Spring Data Elasticsearch 3.2.x introduced the <a href="#elasticsearch.mapping.meta-model">Meta Model Object Mapping</a>.
As of version 4.0 only the Meta Object Mapping is used, the Jackson based mapper is not available anymore and the <code>MappingElasticsearchConverter</code> is used.</p>
</div>
<div class="paragraph">
<p>The main reasons for the removal of the Jackson based mapper are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Custom mappings of fields needed to be done with annotations like <code>@JsonFormat</code> or <code>@JsonInclude</code>.
This often caused problems when the same object was used in different JSON based datastores or sent over a JSON based API.</p>
</li>
<li>
<p>Custom field types and formats also need to be stored into the Elasticsearch index mappings.
The Jackson based annotations did not fully provide all the information that is necessary to represent the types of Elasticsearch.</p>
</li>
<li>
<p>Fields must be mapped not only when converting from and to entities, but also in query argument, returned data and on other places.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Using the <code>MappingElasticsearchConverter</code> now covers all these cases.</p>
</div>
<div class="sect2">
<h3 id="elasticsearch.mapping.meta-model"><a class="anchor" href="#elasticsearch.mapping.meta-model"></a>6.1. Meta Model Object Mapping</h3>
<div class="paragraph">
<p>The Metamodel based approach uses domain type information for reading/writing from/to Elasticsearch.
This allows to register <code>Converter</code> instances for specific domain type mapping.</p>
</div>
<div class="sect3">
<h4 id="elasticsearch.mapping.meta-model.annotations"><a class="anchor" href="#elasticsearch.mapping.meta-model.annotations"></a>6.1.1. Mapping Annotation Overview</h4>
<div class="paragraph">
<p>The <code>MappingElasticsearchConverter</code> uses metadata to drive the mapping of objects to documents.
The metadata is taken from the entity&#8217;s properties which can be annotated.</p>
</div>
<div class="paragraph">
<p>The following annotations are available:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>@Document</code>: Applied at the class level to indicate this class is a candidate for mapping to the database.
The most important attributes are:</p>
<div class="ulist">
<ul>
<li>
<p><code>indexName</code>: the name of the index to store this entity in.
This can contain a SpEL template expression like <code>"log-#{T(java.time.LocalDate).now().toString()}"</code></p>
</li>
<li>
<p><code>type</code>: <span class="line-through">the mapping type.
If not set, the lowercased simple name of the class is used.</span> (deprecated since version 4.0)</p>
</li>
<li>
<p><code>createIndex</code>: flag whether to create an index on repository bootstrapping.
Default value is <em>true</em>.
See <a href="#elasticsearch.repositories.autocreation">Automatic creation of indices with the corresponding mapping</a></p>
</li>
<li>
<p><code>versionType</code>: Configuration of version management.
Default value is <em>EXTERNAL</em>.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>@Id</code>: Applied at the field level to mark the field used for identity purpose.</p>
</li>
<li>
<p><code>@Transient</code>: By default all fields are mapped to the document when it is stored or retrieved, this annotation excludes the field.</p>
</li>
<li>
<p><code>@PersistenceConstructor</code>: Marks a given constructor - even a package protected one - to use when instantiating the object from the database.
Constructor arguments are mapped by name to the key values in the retrieved Document.</p>
</li>
<li>
<p><code>@Field</code>: Applied at the field level and defines properties of the field, most of the attributes map to the respective <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">Elasticsearch Mapping</a> definitions (the following list is not complete, check the annotation Javadoc for a complete reference):</p>
<div class="ulist">
<ul>
<li>
<p><code>name</code>: The name of the field as it will be represented in the Elasticsearch document, if not set, the Java field name is used.</p>
</li>
<li>
<p><code>type</code>: The field type, can be one of <em>Text, Keyword, Long, Integer, Short, Byte, Double, Float, Half_Float, Scaled_Float, Date, Date_Nanos, Boolean, Binary, Integer_Range, Float_Range, Long_Range, Double_Range, Date_Range, Ip_Range, Object, Nested, Ip, TokenCount, Percolator, Flattened, Search_As_You_Type</em>.
See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html">Elasticsearch Mapping Types</a></p>
</li>
<li>
<p><code>format</code>: One or more built-in date formats, see the next section <a href="#elasticsearch.mapping.meta-model.date-formats">Date format mapping</a>.</p>
</li>
<li>
<p><code>pattern</code>: One or more custom date formats, see the next section <a href="#elasticsearch.mapping.meta-model.date-formats">Date format mapping</a>.</p>
</li>
<li>
<p><code>store</code>: Flag whether the original field value should be store in Elasticsearch, default value is <em>false</em>.</p>
</li>
<li>
<p><code>analyzer</code>, <code>searchAnalyzer</code>, <code>normalizer</code> for specifying custom analyzers and normalizer.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>@GeoPoint</code>: Marks a field as <em>geo_point</em> datatype.
Can be omitted if the field is an instance of the <code>GeoPoint</code> class.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The mapping metadata infrastructure is defined in a separate spring-data-commons project that is technology agnostic.</p>
</div>
<div class="sect4">
<h5 id="elasticsearch.mapping.meta-model.date-formats"><a class="anchor" href="#elasticsearch.mapping.meta-model.date-formats"></a>Date format mapping</h5>
<div class="paragraph">
<p>Properties that derive from <code>TemporalAccessor</code> or are of type <code>java.util.Date</code> must either have a <code>@Field</code> annotation
of type <code>FieldType.Date</code> or a custom converter must be registered for this type. This paragraph describes the use of
<code>FieldType.Date</code>.</p>
</div>
<div class="paragraph">
<p>There are two attributes of the <code>@Field</code> annotation that define which date format information is written to the
mapping (also see <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#built-in-date-formats">Elasticsearch Built In Formats</a> and <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#custom-date-formats">Elasticsearch Custom Date Formats</a>)</p>
</div>
<div class="paragraph">
<p>The <code>format</code> attributes is used to define at least one of the predefined formats. If it is not defined, then a
default value of <em>_date_optional_time</em> and <em>epoch_millis</em> is used.</p>
</div>
<div class="paragraph">
<p>The <code>pattern</code> attribute can be used to add additional custom format strings. If you want to use only custom date formats, you must set the <code>format</code> property to empty <code>{}</code>.</p>
</div>
<div class="paragraph">
<p>The following table shows the different attributes and the mapping created from their values:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">annotation</th>
<th class="tableblock halign-left valign-top">format string in Elasticsearch mapping</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">@Field(type=FieldType.Date)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">"date_optional_time||epoch_millis",</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">@Field(type=FieldType.Date, format=DateFormat.basic_date)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">"basic_date"</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">@Field(type=FieldType.Date, format={DateFormat.basic_date, DateFormat.basic_time})</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">"basic_date||basic_time"</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">@Field(type=FieldType.Date, pattern="dd.MM.uuuu")</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">"date_optional_time||epoch_millis||dd.MM.uuuu",</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">@Field(type=FieldType.Date, format={}, pattern="dd.MM.uuuu")</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">"dd.MM.uuuu"</p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If you are using a custom date format, you need to use <em>uuuu</em> for the year instead of <em>yyyy</em>.
This is due to a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/migrate-to-java-time.html#java-time-migration-incompatible-date-formats">change in Elasticsearch 7</a>.
</td>
</tr>
</table>
</div>
</div>
<div class="sect4">
<h5>Mapped field names</h5>
<div class="paragraph">
<p>Without further configuration, Spring Data Elasticsearch will use the property name of an object as field name in Elasticsearch. This can be changed for individual field by using the <code>@Field</code> annotation on that property.</p>
</div>
<div class="paragraph">
<p>It is also possible to define a <code>FieldNamingStrategy</code> in the configuration of the client (<a href="#elasticsearch.clients">Elasticsearch Clients</a>). If for example a <code>SnakeCaseFieldNamingStrategy</code> is configured, the property <em>sampleProperty</em> of the object would be mapped to <em>sample_property</em> in Elasticsearch. A <code>FieldNamingStrategy</code> applies to all entities; it can be overwritten by
setting a specific name with <code>@Field</code> on a property.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch.mapping.meta-model.rules"><a class="anchor" href="#elasticsearch.mapping.meta-model.rules"></a>6.1.2. Mapping Rules</h4>
<div class="sect4">
<h5>Type Hints</h5>
<div class="paragraph">
<p>Mapping uses <em>type hints</em> embedded in the document sent to the server to allow generic type mapping.
Those type hints are represented as <code>_class</code> attributes within the document and are written for each aggregate root.</p>
</div>
<div class="exampleblock">
<div class="title">Example 56. Type Hints</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public class Person {              <i class="conum" data-value="1"></i><b>(1)</b>

  @Id String id;
  String firstname;
  String lastname;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  "_class" : "com.example.Person", <i class="conum" data-value="1"></i><b>(1)</b>
  "id" : "cb7bef",
  "firstname" : "Sarah",
  "lastname" : "Connor"
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>By default the domain types class name is used for the type hint.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>Type hints can be configured to hold custom information.
Use the <code>@TypeAlias</code> annotation to do so.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Make sure to add types with <code>@TypeAlias</code> to the initial entity set (<code>AbstractElasticsearchConfiguration#getInitialEntitySet</code>) to already have entity information available when first reading data from the store.
</td>
</tr>
</table>
</div>
<div class="exampleblock">
<div class="title">Example 57. Type Hints with Alias</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@TypeAlias("human")                <i class="conum" data-value="1"></i><b>(1)</b>
public class Person {

  @Id String id;
  // ...
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  "_class" : "human",              <i class="conum" data-value="1"></i><b>(1)</b>
  "id" : ...
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The configured alias is used when writing the entity.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Type hints will not be written for nested Objects unless the properties type is <code>Object</code>, an interface or the actual value type does not match the properties declaration.
</td>
</tr>
</table>
</div>
</div>
<div class="sect4">
<h5>Geospatial Types</h5>
<div class="paragraph">
<p>Geospatial types like <code>Point</code> &amp; <code>GeoPoint</code> are converted into <em>lat/lon</em> pairs.</p>
</div>
<div class="exampleblock">
<div class="title">Example 58. Geospatial types</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public class Address {

  String city, street;
  Point location;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  "city" : "Los Angeles",
  "street" : "2800 East Observatory Road",
  "location" : { "lat" : 34.118347, "lon" : -118.3026284 }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5>GeoJson Types</h5>
<div class="paragraph">
<p>Spring Data Elasticsearch supports the GeoJson types by providing an interface <code>GeoJson</code> and implementations for the different geometries.
They are mapped to Elasticsearch documents according to the GeoJson specification.
The corresponding properties of the entity are specified in the index mappings as <code>geo_shape</code> when the index mappings is written. (check the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html">Elasticsearch documentation</a> as well)</p>
</div>
<div class="exampleblock">
<div class="title">Example 59. GeoJson types</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public class Address {

  String city, street;
  GeoJsonPoint location;
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  "city": "Los Angeles",
  "street": "2800 East Observatory Road",
  "location": {
    "type": "Point",
    "coordinates": [-118.3026284, 34.118347]
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The following GeoJson types are implemented:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>GeoJsonPoint</code></p>
</li>
<li>
<p><code>GeoJsonMultiPoint</code></p>
</li>
<li>
<p><code>GeoJsonLineString</code></p>
</li>
<li>
<p><code>GeoJsonMultiLineString</code></p>
</li>
<li>
<p><code>GeoJsonPolygon</code></p>
</li>
<li>
<p><code>GeoJsonMultiPolygon</code></p>
</li>
<li>
<p><code>GeoJsonGeometryCollection</code></p>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5>Collections</h5>
<div class="paragraph">
<p>For values inside Collections apply the same mapping rules as for aggregate roots when it comes to <em>type hints</em> and <a href="#elasticsearch.mapping.meta-model.conversions">Custom Conversions</a>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 60. Collections</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public class Person {

  // ...

  List&lt;Person&gt; friends;

}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  // ...

  "friends" : [ { "firstname" : "Kyle", "lastname" : "Reese" } ]
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5>Maps</h5>
<div class="paragraph">
<p>For values inside Maps apply the same mapping rules as for aggregate roots when it comes to <em>type hints</em> and <a href="#elasticsearch.mapping.meta-model.conversions">Custom Conversions</a>.
However the Map key needs to a String to be processed by Elasticsearch.</p>
</div>
<div class="exampleblock">
<div class="title">Example 61. Collections</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public class Person {

  // ...

  Map&lt;String, Address&gt; knownLocations;

}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  // ...

  "knownLocations" : {
    "arrivedAt" : {
       "city" : "Los Angeles",
       "street" : "2800 East Observatory Road",
       "location" : { "lat" : 34.118347, "lon" : -118.3026284 }
     }
  }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch.mapping.meta-model.conversions"><a class="anchor" href="#elasticsearch.mapping.meta-model.conversions"></a>6.1.3. Custom Conversions</h4>
<div class="paragraph">
<p>Looking at the <code>Configuration</code> from the <a href="#elasticsearch.mapping.meta-model">previous section</a> <code>ElasticsearchCustomConversions</code> allows registering specific rules for mapping domain and simple types.</p>
</div>
<div class="exampleblock">
<div class="title">Example 62. Meta Model Object Mapping Configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class Config extends AbstractElasticsearchConfiguration {

  @Override
  public RestHighLevelClient elasticsearchClient() {
    return RestClients.create(ClientConfiguration.create("localhost:9200")).rest();
  }

  @Bean
  @Override
  public ElasticsearchCustomConversions elasticsearchCustomConversions() {
    return new ElasticsearchCustomConversions(
      Arrays.asList(new AddressToMap(), new MapToAddress()));       <i class="conum" data-value="1"></i><b>(1)</b>
  }

  @WritingConverter                                                 <i class="conum" data-value="2"></i><b>(2)</b>
  static class AddressToMap implements Converter&lt;Address, Map&lt;String, Object&gt;&gt; {

    @Override
    public Map&lt;String, Object&gt; convert(Address source) {

      LinkedHashMap&lt;String, Object&gt; target = new LinkedHashMap&lt;&gt;();
      target.put("ciudad", source.getCity());
      // ...

      return target;
    }
  }

  @ReadingConverter                                                 <i class="conum" data-value="3"></i><b>(3)</b>
  static class MapToAddress implements Converter&lt;Map&lt;String, Object&gt;, Address&gt; {

    @Override
    public Address convert(Map&lt;String, Object&gt; source) {

      // ...
      return address;
    }
  }
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  "ciudad" : "Los Angeles",
  "calle" : "2800 East Observatory Road",
  "localidad" : { "lat" : 34.118347, "lon" : -118.3026284 }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Add <code>Converter</code> implementations.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Set up the <code>Converter</code> used for writing <code>DomainType</code> to Elasticsearch.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Set up the <code>Converter</code> used for reading <code>DomainType</code> from search result.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="elasticsearch.operations"><a class="anchor" href="#elasticsearch.operations"></a>7. Elasticsearch Operations</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data Elasticsearch uses several interfaces to define the operations that can be called against an Elasticsearch index (for a description of the reactive interfaces see <a href="#elasticsearch.reactive.operations">Reactive Elasticsearch Operations</a>).</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>IndexOperations</code> defines actions on index level like creating or deleting an index.</p>
</li>
<li>
<p><code>DocumentOperations</code> defines actions to store, update and retrieve entities based on their id.</p>
</li>
<li>
<p><code>SearchOperations</code> define the actions to search for multiple entities using queries</p>
</li>
<li>
<p><code>ElasticsearchOperations</code> combines the <code>DocumentOperations</code> and <code>SearchOperations</code> interfaces.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These interfaces correspond to the structuring of the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rest-apis.html">Elasticsearch API</a>.</p>
</div>
<div class="paragraph">
<p>The default implementations of the interfaces offer:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>index management functionality.</p>
</li>
<li>
<p>Read/Write mapping support for domain types.</p>
</li>
<li>
<p>A rich query and criteria api.</p>
</li>
<li>
<p>Resource management and Exception translation.</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<div class="title">Index management and automatic creation of indices and mappings.</div>
<p>The <code>IndexOperations</code> interface and the provided implementation which can be obtained from an <code>ElasticsearchOperations</code> instance - for example with a call to <code>operations.indexOps(clazz)</code>- give the user the ability to create indices, put mappings or store template and alias information in the Elasticsearch cluster. Details of the index that will be created
can be set by using the <code>@Setting</code> annotation, refer to <a href="#elasticsearc.misc.index.settings">Index settings</a> for further information.</p>
</div>
<div class="paragraph">
<p><strong>None of these operations are done automatically</strong> by the implementations of <code>IndexOperations</code> or <code>ElasticsearchOperations</code>. It is the user&#8217;s responsibility to call the methods.</p>
</div>
<div class="paragraph">
<p>There is support for automatic creation of indices and writing the mappings when using Spring Data Elasticsearch repositories, see <a href="#elasticsearch.repositories.autocreation">Automatic creation of indices with the corresponding mapping</a></p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="elasticsearch.operations.template"><a class="anchor" href="#elasticsearch.operations.template"></a>7.1. ElasticsearchTemplate</h3>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Usage of the ElasticsearchTemplate is deprecated as of version 4.0, use ElasticsearchRestTemplate instead.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The <code>ElasticsearchTemplate</code> is an implementation of the <code>ElasticsearchOperations</code> interface using the <a href="#elasticsearch.clients.transport">Transport Client</a>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 63. ElasticsearchTemplate configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class TransportClientConfig extends ElasticsearchConfigurationSupport {

  @Bean
  public Client elasticsearchClient() throws UnknownHostException {                 <i class="conum" data-value="1"></i><b>(1)</b>
    Settings settings = Settings.builder().put("cluster.name", "elasticsearch").build();
    TransportClient client = new PreBuiltTransportClient(settings);
    client.addTransportAddress(new TransportAddress(InetAddress.getByName("127.0.0.1"), 9300));
    return client;
  }

  @Bean(name = {"elasticsearchOperations", "elasticsearchTemplate"})
  public ElasticsearchTemplate elasticsearchTemplate() throws UnknownHostException { <i class="conum" data-value="2"></i><b>(2)</b>
  	return new ElasticsearchTemplate(elasticsearchClient());
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Setting up the <a href="#elasticsearch.clients.transport">Transport Client</a>.
Deprecated as of version 4.0.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creating the <code>ElasticsearchTemplate</code> bean, offering both names, <em>elasticsearchOperations</em> and <em>elasticsearchTemplate</em>.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.operations.resttemplate"><a class="anchor" href="#elasticsearch.operations.resttemplate"></a>7.2. ElasticsearchRestTemplate</h3>
<div class="paragraph">
<p>The <code>ElasticsearchRestTemplate</code> is an implementation of the <code>ElasticsearchOperations</code> interface using the <a href="#elasticsearch.clients.rest">High Level REST Client</a>.</p>
</div>
<div class="exampleblock">
<div class="title">Example 64. ElasticsearchRestTemplate configuration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class RestClientConfig extends AbstractElasticsearchConfiguration {
  @Override
  public RestHighLevelClient elasticsearchClient() {       <i class="conum" data-value="1"></i><b>(1)</b>
    return RestClients.create(ClientConfiguration.localhost()).rest();
  }

  // no special bean creation needed                       <i class="conum" data-value="2"></i><b>(2)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Setting up the <a href="#elasticsearch.clients.rest">High Level REST Client</a>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The base class <code>AbstractElasticsearchConfiguration</code> already provides the <code>elasticsearchTemplate</code> bean.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.operations.usage"><a class="anchor" href="#elasticsearch.operations.usage"></a>7.3. Usage examples</h3>
<div class="paragraph">
<p>As both <code>ElasticsearchTemplate</code> and <code>ElasticsearchRestTemplate</code> implement the <code>ElasticsearchOperations</code> interface, the code to use them is not different.
The example shows how to use an injected <code>ElasticsearchOperations</code> instance in a Spring REST controller.
The decision, if this is using the <code>TransportClient</code> or the <code>RestClient</code> is made by providing the corresponding Bean with one of the configurations shown above.</p>
</div>
<div class="exampleblock">
<div class="title">Example 65. ElasticsearchOperations usage</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@RestController
@RequestMapping("/")
public class TestController {

  private  ElasticsearchOperations elasticsearchOperations;

  public TestController(ElasticsearchOperations elasticsearchOperations) { <i class="conum" data-value="1"></i><b>(1)</b>
    this.elasticsearchOperations = elasticsearchOperations;
  }

  @PostMapping("/person")
  public String save(@RequestBody Person person) {                         <i class="conum" data-value="2"></i><b>(2)</b>

    IndexQuery indexQuery = new IndexQueryBuilder()
      .withId(person.getId().toString())
      .withObject(person)
      .build();
    String documentId = elasticsearchOperations.index(indexQuery);
    return documentId;
  }

  @GetMapping("/person/{id}")
  public Person findById(@PathVariable("id")  Long id) {                   <i class="conum" data-value="3"></i><b>(3)</b>
    Person person = elasticsearchOperations
      .queryForObject(GetQuery.getById(id.toString()), Person.class);
    return person;
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Let Spring inject the provided <code>ElasticsearchOperations</code> bean in the constructor.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Store some entity in the Elasticsearch cluster.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Retrieve the entity with a query by id.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>To see the full possibilities of <code>ElasticsearchOperations</code> please refer to the API documentation.</p>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.reactive.operations"><a class="anchor" href="#elasticsearch.reactive.operations"></a>7.4. Reactive Elasticsearch Operations</h3>
<div class="paragraph">
<p><code>ReactiveElasticsearchOperations</code> is the gateway to executing high level commands against an Elasticsearch cluster using the <code>ReactiveElasticsearchClient</code>.</p>
</div>
<div class="paragraph">
<p>The <code>ReactiveElasticsearchTemplate</code> is the default implementation of <code>ReactiveElasticsearchOperations</code>.</p>
</div>
<div class="sect3">
<h4 id="elasticsearch.reactive.template"><a class="anchor" href="#elasticsearch.reactive.template"></a>7.4.1. Reactive Elasticsearch Template</h4>
<div class="paragraph">
<p>To get started the <code>ReactiveElasticsearchTemplate</code> needs to know about the actual client to work with.
Please see <a href="#elasticsearch.clients.reactive">Reactive Client</a> for details on the client.</p>
</div>
<div class="sect4">
<h5 id="elasticsearch.reactive.template.configuration"><a class="anchor" href="#elasticsearch.reactive.template.configuration"></a>Reactive Template Configuration</h5>
<div class="paragraph">
<p>The easiest way of setting up the <code>ReactiveElasticsearchTemplate</code> is via <code>AbstractReactiveElasticsearchConfiguration</code> providing
dedicated configuration method hooks for <code>base package</code>, the <code>initial entity set</code> etc.</p>
</div>
<div class="exampleblock">
<div class="title">Example 66. The AbstractReactiveElasticsearchConfiguration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class Config extends AbstractReactiveElasticsearchConfiguration {

  @Bean <i class="conum" data-value="1"></i><b>(1)</b>
  @Override
  public ReactiveElasticsearchClient reactiveElasticsearchClient() {
      // ...
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Configure the client to use. This can be done by <code>ReactiveRestClients</code> or directly via <code>DefaultReactiveElasticsearchClient</code>.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If applicable set default <code>HttpHeaders</code> via the <code>ClientConfiguration</code> of the <code>ReactiveElasticsearchClient</code>. See <a href="#elasticsearch.clients.configuration">Client Configuration</a>.
</td>
</tr>
</table>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
If needed the <code>ReactiveElasticsearchTemplate</code> can be configured with default <code>RefreshPolicy</code> and <code>IndicesOptions</code> that get applied to the related requests by overriding the defaults of <code>refreshPolicy()</code> and <code>indicesOptions()</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>However one might want to be more in control over the actual components and use a more verbose approach.</p>
</div>
<div class="exampleblock">
<div class="title">Example 67. Configure the ReactiveElasticsearchTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
public class Config {

  @Bean <i class="conum" data-value="1"></i><b>(1)</b>
  public ReactiveElasticsearchClient reactiveElasticsearchClient() {
    // ...
  }
  @Bean <i class="conum" data-value="2"></i><b>(2)</b>
  public ElasticsearchConverter elasticsearchConverter() {
    return new MappingElasticsearchConverter(elasticsearchMappingContext());
  }
  @Bean <i class="conum" data-value="3"></i><b>(3)</b>
  public SimpleElasticsearchMappingContext elasticsearchMappingContext() {
    return new SimpleElasticsearchMappingContext();
  }
  @Bean <i class="conum" data-value="4"></i><b>(4)</b>
  public ReactiveElasticsearchOperations reactiveElasticsearchOperations() {
    return new ReactiveElasticsearchTemplate(reactiveElasticsearchClient(), elasticsearchConverter());
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Configure the client to use. This can be done by <code>ReactiveRestClients</code> or directly via <code>DefaultReactiveElasticsearchClient</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Set up the <code>ElasticsearchConverter</code> used for domain type mapping utilizing metadata provided by the mapping context.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The Elasticsearch specific mapping context for domain type metadata.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The actual template based on the client and conversion infrastructure.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect4">
<h5 id="elasticsearch.reactive.template.usage"><a class="anchor" href="#elasticsearch.reactive.template.usage"></a>Reactive Template Usage</h5>
<div class="paragraph">
<p><code>ReactiveElasticsearchTemplate</code> lets you save, find and delete your domain objects and map those objects to documents stored in Elasticsearch.</p>
</div>
<div class="paragraph">
<p>Consider the following:</p>
</div>
<div class="exampleblock">
<div class="title">Example 68. Use the ReactiveElasticsearchTemplate</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Document(indexName = "marvel")
public class Person {

  private @Id String id;
  private String name;
  private int age;
  // Getter/Setter omitted...
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">template.save(new Person("Bruce Banner", 42))                    <i class="conum" data-value="1"></i><b>(1)</b>
  .doOnNext(System.out::println)
  .flatMap(person -&gt; template.findById(person.id, Person.class)) <i class="conum" data-value="2"></i><b>(2)</b>
  .doOnNext(System.out::println)
  .flatMap(person -&gt; template.delete(person))                    <i class="conum" data-value="3"></i><b>(3)</b>
  .doOnNext(System.out::println)
  .flatMap(id -&gt; template.count(Person.class))                   <i class="conum" data-value="4"></i><b>(4)</b>
  .doOnNext(System.out::println)
  .subscribe(); <i class="conum" data-value="5"></i><b>(5)</b></code></pre>
</div>
</div>
<div class="paragraph">
<p>The above outputs the following sequence on the console.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="text" class="language-text hljs">&gt; Person(id=QjWCWWcBXiLAnp77ksfR, name=Bruce Banner, age=42)
&gt; Person(id=QjWCWWcBXiLAnp77ksfR, name=Bruce Banner, age=42)
&gt; QjWCWWcBXiLAnp77ksfR
&gt; 0</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Insert a new <code>Person</code> document into the <em>marvel</em> index under type <em>characters</em>. The <code>id</code> is generated on server side and set into the instance returned.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Lookup the <code>Person</code> with matching <code>id</code> in the <em>marvel</em> index under type <em>characters</em>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Delete the <code>Person</code> with matching <code>id</code>, extracted from the given instance, in the <em>marvel</em> index under type <em>characters</em>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Count the total number of documents in the <em>marvel</em> index under type <em>characters</em>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Don&#8217;t forget to <em>subscribe()</em>.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.operations.searchresulttypes"><a class="anchor" href="#elasticsearch.operations.searchresulttypes"></a>7.5. Search Result Types</h3>
<div class="paragraph">
<p>When a document is retrieved with the methods of the <code>DocumentOperations</code> interface, just the found entity will be returned.
When searching with the methods of the <code>SearchOperations</code> interface, additional information is available for each entity, for example the <em>score</em> or the <em>sortValues</em> of the found entity.</p>
</div>
<div class="paragraph">
<p>In order to return this information, each entity is wrapped in a <code>SearchHit</code> object that contains this entity-specific additional information.
These <code>SearchHit</code> objects themselves are returned within a <code>SearchHits</code> object which additionally contains informations about the whole search like the <em>maxScore</em> or requested aggregations.
The following classes and interfaces are now available:</p>
</div>
<div class="paragraph">
<div class="title">SearchHit&lt;T&gt;</div>
<p>Contains the following information:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Id</p>
</li>
<li>
<p>Score</p>
</li>
<li>
<p>Sort Values</p>
</li>
<li>
<p>Highlight fields</p>
</li>
<li>
<p>Inner hits (this is an embedded <code>SearchHits</code> object containing eventually returned inner hits)</p>
</li>
<li>
<p>The retrieved entity of type &lt;T&gt;</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">SearchHits&lt;T&gt;</div>
<p>Contains the following information:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Number of total hits</p>
</li>
<li>
<p>Total hits relation</p>
</li>
<li>
<p>Maximum score</p>
</li>
<li>
<p>A list of <code>SearchHit&lt;T&gt;</code> objects</p>
</li>
<li>
<p>Returned aggregations</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">SearchPage&lt;T&gt;</div>
<p>Defines a Spring Data <code>Page</code> that contains a <code>SearchHits&lt;T&gt;</code> element and can be used for paging access using repository methods.</p>
</div>
<div class="paragraph">
<div class="title">SearchScrollHits&lt;T&gt;</div>
<p>Returned by the low level scroll API functions in <code>ElasticsearchRestTemplate</code>, it enriches a <code>SearchHits&lt;T&gt;</code> with the Elasticsearch scroll id.</p>
</div>
<div class="paragraph">
<div class="title">SearchHitsIterator&lt;T&gt;</div>
<p>An Iterator returned by the streaming functions of the <code>SearchOperations</code> interface.</p>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.operations.queries"><a class="anchor" href="#elasticsearch.operations.queries"></a>7.6. Queries</h3>
<div class="paragraph">
<p>Almost all of the methods defined in the <code>SearchOperations</code> and <code>ReactiveSearchOperations</code> interface take a <code>Query</code> parameter that defines the query to execute for searching. <code>Query</code> is an interface and Spring Data Elasticsearch provides three implementations: <code>CriteriaQuery</code>, <code>StringQuery</code> and <code>NativeSearchQuery</code>.</p>
</div>
<div class="sect3">
<h4 id="elasticsearch.operations.criteriaquery"><a class="anchor" href="#elasticsearch.operations.criteriaquery"></a>7.6.1. CriteriaQuery</h4>
<div class="paragraph">
<p><code>CriteriaQuery</code> based queries allow the creation of queries to search for data without knowing the syntax or basics of Elasticsearch queries. They allow the user to build queries by simply chaining and combining <code>Criteria</code> objects that specifiy the criteria the searched documents must fulfill.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
when talking about AND or OR when combining criteria keep in mind, that in Elasticsearch AND are converted to a <strong>must</strong> condition and OR to a <strong>should</strong>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><code>Criteria</code> and their usage are best explained by example
(let&#8217;s assume we have a <code>Book</code> entity with a <code>price</code> property):</p>
</div>
<div class="exampleblock">
<div class="title">Example 69. Get books with a given price</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Criteria criteria = new Criteria("price").is(42.0);
Query query = new CriteriaQuery(criteria);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Conditions for the same field can be chained, they will be combined with a logical AND:</p>
</div>
<div class="exampleblock">
<div class="title">Example 70. Get books with a given price</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Criteria criteria = new Criteria("price").greaterThan(42.0).lessThan(34.0L);
Query query = new CriteriaQuery(criteria);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>When chaining <code>Criteria</code>, by default a AND logic is used:</p>
</div>
<div class="exampleblock">
<div class="title">Example 71. Get all persons with first name <em>James</em> and last name <em>Miller</em>:</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Criteria criteria = new Criteria("lastname").is("Miller") <i class="conum" data-value="1"></i><b>(1)</b>
  .and("firstname").is("James")                           <i class="conum" data-value="2"></i><b>(2)</b>
Query query = new CriteriaQuery(criteria);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>the first <code>Criteria</code></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>the and() creates a new <code>Criteria</code> and chaines it to the first one.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>If you want to create nested queries, you need to use subqueries for this. Let&#8217;s assume we want to find all persons with a last name of <em>Miller</em> and a first name of either <em>Jack</em> or <em>John</em>:</p>
</div>
<div class="exampleblock">
<div class="title">Example 72. Nested subqueries</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Criteria miller = new Criteria("lastName").is("Miller")  <i class="conum" data-value="1"></i><b>(1)</b>
  .subCriteria(                                          <i class="conum" data-value="2"></i><b>(2)</b>
    new Criteria().or("firstName").is("John")            <i class="conum" data-value="3"></i><b>(3)</b>
      .or("firstName").is("Jack")                        <i class="conum" data-value="4"></i><b>(4)</b>
  );
Query query = new CriteriaQuery(criteria);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>create a first <code>Criteria</code> for the last name</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>this is combined with AND to a subCriteria</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>This sub Criteria is an OR combination for the first name <em>John</em></td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>and the first name Jack</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>Please refer to the API documentation of the <code>Criteria</code> class for a complete overview of the different available operations.</p>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch.operations.stringquery"><a class="anchor" href="#elasticsearch.operations.stringquery"></a>7.6.2. StringQuery</h4>
<div class="paragraph">
<p>This class takes an Elasticsearch query as JSON String.
The following code shows a query that searches for persons having the first name "Jack":</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Query query = new SearchQuery("{ \"match\": { \"firstname\": { \"query\": \"Jack\" } } } ");
SearchHits&lt;Person&gt; searchHits = operations.search(query, Person.class);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Using <code>StringQuery</code> may be appropriate if you already have an Elasticsearch query to use.</p>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch.operations.nativesearchquery"><a class="anchor" href="#elasticsearch.operations.nativesearchquery"></a>7.6.3. NativeSearchQuery</h4>
<div class="paragraph">
<p><code>NativeSearchQuery</code> is the class to use when you have a complex query, or a query that cannot be expressed by using the <code>Criteria</code> API, for example when building queries and using aggregates.
It allows to use all the different <code>QueryBuilder</code> implementations from the Elasticsearch library therefore named "native".</p>
</div>
<div class="paragraph">
<p>The following code shows how to search for persons with a given firstname and for the found documents have a terms aggregation that counts the number of occurences of the lastnames for these persons:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Query query = new NativeSearchQueryBuilder()
    .addAggregation(terms("lastnames").field("lastname").size(10)) //
    .withQuery(QueryBuilders.matchQuery("firstname", firstName))
    .build();

SearchHits&lt;Person&gt; searchHits = operations.search(query, Person.class);</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="elasticsearch.repositories"><a class="anchor" href="#elasticsearch.repositories"></a>8. Elasticsearch Repositories</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This chapter includes details of the Elasticsearch repository implementation.</p>
</div>
<div class="exampleblock">
<div class="title">Example 73. The sample <code>Book</code> entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Document(indexName="books")
class Book {
    @Id
    private String id;

    @Field(type = FieldType.text)
    private String name;

    @Field(type = FieldType.text)
    private String summary;

    @Field(type = FieldType.Integer)
    private Integer price;

	// getter/setter ...
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.repositories.autocreation"><a class="anchor" href="#elasticsearch.repositories.autocreation"></a>8.1. Automatic creation of indices with the corresponding mapping</h3>
<div class="paragraph">
<p>The <code>@Document</code> annotation has an argument <code>createIndex</code>. If this argument is set to true - which is the default value - Spring Data Elasticsearch will during bootstrapping the repository support on application startup check if the index defined by the <code>@Document</code> annotation exists.</p>
</div>
<div class="paragraph">
<p>If it does not exist, the index will be created and the mappings derived from the entity&#8217;s annotations (see <a href="#elasticsearch.mapping">Elasticsearch Object Mapping</a>) will be written to the newly created index. Details of the index that will be created can be set by using the <code>@Setting</code> annotation, refer to <a href="#elasticsearc.misc.index.settings">Index settings</a> for further information.</p>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.query-methods"><a class="anchor" href="#elasticsearch.query-methods"></a>8.2. Query methods</h3>
<div class="sect3">
<h4 id="elasticsearch.query-methods.finders"><a class="anchor" href="#elasticsearch.query-methods.finders"></a>8.2.1. Query lookup strategies</h4>
<div class="paragraph">
<p>The Elasticsearch module supports all basic query building feature as string queries, native search queries, criteria based queries or have it being derived from the method name.</p>
</div>
<div class="sect4">
<h5>Declared queries</h5>
<div class="paragraph">
<p>Deriving the query from the method name is not always sufficient and/or may result in unreadable method names.
In this case one might make use of the <code>@Query</code> annotation (see <a href="#elasticsearch.query-methods.at-query">Using @Query Annotation</a> ).</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch.query-methods.criterions"><a class="anchor" href="#elasticsearch.query-methods.criterions"></a>8.2.2. Query creation</h4>
<div class="paragraph">
<p>Generally the query creation mechanism for Elasticsearch works as described in <a href="#repositories.query-methods">Query Methods</a>.
Here&#8217;s a short example of what a Elasticsearch query method translates into:</p>
</div>
<div class="exampleblock">
<div class="title">Example 74. Query creation from method names</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface BookRepository extends Repository&lt;Book, String&gt; {
  List&lt;Book&gt; findByNameAndPrice(String name, Integer price);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The method name above will be translated into the following Elasticsearch json query</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-none hljs">{
    "query": {
        "bool" : {
            "must" : [
                { "query_string" : { "query" : "?", "fields" : [ "name" ] } },
                { "query_string" : { "query" : "?", "fields" : [ "price" ] } }
            ]
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A list of supported keywords for Elasticsearch is shown below.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 2. Supported keywords inside method names</caption>
<colgroup>
<col style="width: 16.6666%;">
<col style="width: 33.3333%;">
<col style="width: 50.0001%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Keyword</th>
<th class="tableblock halign-left valign-top">Sample</th>
<th class="tableblock halign-left valign-top">Elasticsearch Query String</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>And</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameAndPrice</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "?", "fields" : [ "name" ] } },
{ "query_string" : { "query" : "?", "fields" : [ "price" ] } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Or</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameOrPrice</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"should" : [
{ "query_string" : { "query" : "?", "fields" : [ "name" ] } },
{ "query_string" : { "query" : "?", "fields" : [ "price" ] } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Is</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByName</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "?", "fields" : [ "name" ] } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Not</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameNot</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must_not" : [
{ "query_string" : { "query" : "?", "fields" : [ "name" ] } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Between</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByPriceBetween</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"range" : {"price" : {"from" : ?, "to" : ?, "include_lower" : true, "include_upper" : true } } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThan</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByPriceLessThan</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"range" : {"price" : {"from" : null, "to" : ?, "include_lower" : true, "include_upper" : false } } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThanEqual</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByPriceLessThanEqual</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"range" : {"price" : {"from" : null, "to" : ?, "include_lower" : true, "include_upper" : true } } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThan</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByPriceGreaterThan</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"range" : {"price" : {"from" : ?, "to" : null, "include_lower" : false, "include_upper" : true } } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThanEqual</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByPriceGreaterThan</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"range" : {"price" : {"from" : ?, "to" : null, "include_lower" : true, "include_upper" : true } } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Before</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByPriceBefore</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"range" : {"price" : {"from" : null, "to" : ?, "include_lower" : true, "include_upper" : true } } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>After</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByPriceAfter</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"range" : {"price" : {"from" : ?, "to" : null, "include_lower" : true, "include_upper" : true } } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Like</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameLike</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "?*", "fields" : [ "name" ] }, "analyze_wildcard": true }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StartingWith</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameStartingWith</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "?*", "fields" : [ "name" ] }, "analyze_wildcard": true }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EndingWith</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameEndingWith</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "*?", "fields" : [ "name" ] }, "analyze_wildcard": true }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Contains/Containing</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameContaining</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "*?*", "fields" : [ "name" ] }, "analyze_wildcard": true }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>In</code> (when annotated as FieldType.Keyword)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameIn(Collection&lt;String&gt;names)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"bool" : {"must" : [
{"terms" : {"name" : ["?","?"]}}
]
}
}
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>In</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameIn(Collection&lt;String&gt;names)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query": {"bool": {"must": [{"query_string":{"query": "\"?\" \"?\"", "fields": ["name"]}}]}}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotIn</code> (when annotated as FieldType.Keyword)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameNotIn(Collection&lt;String&gt;names)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{"bool" : {"must_not" : [
{"terms" : {"name" : ["?","?"]}}
]
}
}
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotIn</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByNameNotIn(Collection&lt;String&gt;names)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{"query": {"bool": {"must": [{"query_string": {"query": "NOT(\"?\" \"?\")", "fields": ["name"]}}]}}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Near</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByStoreNear</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Not Supported Yet !</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>True</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAvailableTrue</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "true", "fields" : [ "available" ] } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>False</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAvailableFalse</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "false", "fields" : [ "available" ] } }
]
}
}}</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>OrderBy</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>findByAvailableTrueOrderByNameDesc</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>{ "query" : {
"bool" : {
"must" : [
{ "query_string" : { "query" : "true", "fields" : [ "available" ] } }
]
}
}, "sort":[{"name":{"order":"desc"}}]
}</code></p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Methods names to build Geo-shape queries taking <code>GeoJson</code> parameters are not supported.
Use <code>ElasticsearchOperations</code> with <code>CriteriaQuery</code> in a custom repository implementation if you need to have such a function in a repository.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4>8.2.3. Method return types</h4>
<div class="paragraph">
<p>Repository methods can be defined to have the following return types for returning multiple Elements:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>List&lt;T&gt;</code></p>
</li>
<li>
<p><code>Stream&lt;T&gt;</code></p>
</li>
<li>
<p><code>SearchHits&lt;T&gt;</code></p>
</li>
<li>
<p><code>List&lt;SearchHit&lt;T&gt;&gt;</code></p>
</li>
<li>
<p><code>Stream&lt;SearchHit&lt;T&gt;&gt;</code></p>
</li>
<li>
<p><code>SearchPage&lt;T&gt;</code></p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch.query-methods.at-query"><a class="anchor" href="#elasticsearch.query-methods.at-query"></a>8.2.4. Using @Query Annotation</h4>
<div class="exampleblock">
<div class="title">Example 75. Declare query at the method using the <code>@Query</code> annotation.</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface BookRepository extends ElasticsearchRepository&lt;Book, String&gt; {
    @Query("{\"match\": {\"name\": {\"query\": \"?0\"}}}")
    Page&lt;Book&gt; findByName(String name,Pageable pageable);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The String that is set as the annotation argument must be a valid Elasticsearch JSON query.
It will be sent to Easticsearch as value of the query element; if for example the function is called with the parameter <em>John</em>, it would produce the following query body:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  "query": {
    "match": {
      "name": {
        "query": "John"
      }
    }
  }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.reactive.repositories"><a class="anchor" href="#elasticsearch.reactive.repositories"></a>8.3. Reactive Elasticsearch Repositories</h3>
<div class="paragraph">
<p>Reactive Elasticsearch repository support builds on the core repository support explained in <a href="#repositories">Working with Spring Data Repositories</a> utilizing
operations provided via <a href="#elasticsearch.reactive.operations">Reactive Elasticsearch Operations</a> executed by a <a href="#elasticsearch.clients.reactive">Reactive Client</a>.</p>
</div>
<div class="paragraph">
<p>Spring Data Elasticsearch reactive repository support uses <a href="https://projectreactor.io/">Project Reactor</a> as its reactive
composition library of choice.</p>
</div>
<div class="paragraph">
<p>There are 3 main interfaces to be used:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>ReactiveRepository</code></p>
</li>
<li>
<p><code>ReactiveCrudRepository</code></p>
</li>
<li>
<p><code>ReactiveSortingRepository</code></p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="elasticsearch.reactive.repositories.usage"><a class="anchor" href="#elasticsearch.reactive.repositories.usage"></a>8.3.1. Usage</h4>
<div class="paragraph">
<p>To access domain objects stored in a Elasticsearch using a <code>Repository</code>, just create an interface for it.
Before you can actually go on and do that you will need an entity.</p>
</div>
<div class="exampleblock">
<div class="title">Example 76. Sample <code>Person</code> entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public class Person {

  @Id
  private String id;
  private String firstname;
  private String lastname;
  private Address address;

  // … getters and setters omitted
}</code></pre>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Please note that the <code>id</code> property needs to be of type <code>String</code>.
</td>
</tr>
</table>
</div>
<div class="exampleblock">
<div class="title">Example 77. Basic repository interface to persist Person entities</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-none hljs">interface ReactivePersonRepository extends ReactiveSortingRepository&lt;Person, String&gt; {

  Flux&lt;Person&gt; findByFirstname(String firstname);                                   <i class="conum" data-value="1"></i><b>(1)</b>

  Flux&lt;Person&gt; findByFirstname(Publisher&lt;String&gt; firstname);                        <i class="conum" data-value="2"></i><b>(2)</b>

  Flux&lt;Person&gt; findByFirstnameOrderByLastname(String firstname);                    <i class="conum" data-value="3"></i><b>(3)</b>

  Flux&lt;Person&gt; findByFirstname(String firstname, Sort sort);                        <i class="conum" data-value="4"></i><b>(4)</b>

  Flux&lt;Person&gt; findByFirstname(String firstname, Pageable page);                    <i class="conum" data-value="5"></i><b>(5)</b>

  Mono&lt;Person&gt; findByFirstnameAndLastname(String firstname, String lastname);       <i class="conum" data-value="6"></i><b>(6)</b>

  Mono&lt;Person&gt; findFirstByLastname(String lastname);                                <i class="conum" data-value="7"></i><b>(7)</b>

  @Query("{ \"bool\" : { \"must\" : { \"term\" : { \"lastname\" : \"?0\" } } } }")
  Flux&lt;Person&gt; findByLastname(String lastname);                                     <i class="conum" data-value="8"></i><b>(8)</b>

  Mono&lt;Long&gt; countByFirstname(String firstname)                                     <i class="conum" data-value="9"></i><b>(9)</b>

  Mono&lt;Boolean&gt; existsByFirstname(String firstname)                                 <i class="conum" data-value="10"></i><b>(10)</b>

  Mono&lt;Long&gt; deleteByFirstname(String firstname)                                    <i class="conum" data-value="11"></i><b>(11)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The method shows a query for all people with the given <code>lastname</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Finder method awaiting input from <code>Publisher</code> to bind parameter value for <code>firstname</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Finder method ordering matching documents by <code>lastname</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Finder method ordering matching documents by the expression defined via the <code>Sort</code> parameter.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Use <code>Pageable</code> to pass offset and sorting parameters to the database.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>Finder method concating criteria using <code>And</code> / <code>Or</code> keywords.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Find the first matching entity.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>The method shows a query for all people with the given <code>lastname</code> looked up by running the annotated <code>@Query</code> with given
parameters.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>Count all entities with matching <code>firstname</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="10"></i><b>10</b></td>
<td>Check if at least one entity with matching <code>firstname</code> exists.</td>
</tr>
<tr>
<td><i class="conum" data-value="11"></i><b>11</b></td>
<td>Delete all entites with matching <code>firstname</code>.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch.reactive.repositories.configuration"><a class="anchor" href="#elasticsearch.reactive.repositories.configuration"></a>8.3.2. Configuration</h4>
<div class="paragraph">
<p>For Java configuration, use the <code>@EnableReactiveElasticsearchRepositories</code> annotation. If no base package is configured,
the infrastructure scans the package of the annotated configuration class.</p>
</div>
<div class="paragraph">
<p>The following listing shows how to use Java configuration for a repository:</p>
</div>
<div class="exampleblock">
<div class="title">Example 78. Java configuration for repositories</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
@EnableReactiveElasticsearchRepositories
public class Config extends AbstractReactiveElasticsearchConfiguration {

  @Override
  public ReactiveElasticsearchClient reactiveElasticsearchClient() {
    return ReactiveRestClients.create(ClientConfiguration.localhost());
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Because the repository from the previous example extends <code>ReactiveSortingRepository</code>, all CRUD operations are available
as well as methods for sorted access to the entities. Working with the repository instance is a matter of dependency
injecting it into a client, as the following example shows:</p>
</div>
<div class="exampleblock">
<div class="title">Example 79. Sorted access to Person entities</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">public class PersonRepositoryTests {

  @Autowired ReactivePersonRepository repository;

  @Test
  public void sortsElementsCorrectly() {

    Flux&lt;Person&gt; persons = repository.findAll(Sort.by(new Order(ASC, "lastname")));

    // ...
  }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.repositories.annotations"><a class="anchor" href="#elasticsearch.repositories.annotations"></a>8.4. Annotations for repository methods</h3>
<div class="sect3">
<h4>8.4.1. @Highlight</h4>
<div class="paragraph">
<p>The <code>@Highlight</code> annotation on a repository method defines for which fields of the returned entity highlighting should be included. To search for some text in a <code>Book</code> 's name or summary and have the found data highlighted, the following repository method can be used:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface BookRepository extends Repository&lt;Book, String&gt; {

    @Highlight(fields = {
        @HighlightField(name = "name"),
        @HighlightField(name = "summary")
    })
    List&lt;SearchHit&lt;Book&gt;&gt; findByNameOrSummary(String text, String summary);
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>It is possible to define multiple fields to be highlighted like above, and both the <code>@Highlight</code> and the <code>@HighlightField</code> annotation can further be customized with a <code>@HighlightParameters</code> annotation. Check the Javadocs for the possible configuration options.</p>
</div>
<div class="paragraph">
<p>In the search results the highlight data can be retrieved from the <code>SearchHit</code> class.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.annotation"><a class="anchor" href="#elasticsearch.annotation"></a>8.5. Annotation based configuration</h3>
<div class="paragraph">
<p>The Spring Data Elasticsearch repositories support can be activated using an annotation through JavaConfig.</p>
</div>
<div class="exampleblock">
<div class="title">Example 80. Spring Data Elasticsearch repositories using JavaConfig</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
@EnableElasticsearchRepositories(                             <i class="conum" data-value="1"></i><b>(1)</b>
  basePackages = "org.springframework.data.elasticsearch.repositories"
  )
static class Config {

  @Bean
  public ElasticsearchOperations elasticsearchTemplate() {    <i class="conum" data-value="2"></i><b>(2)</b>
      // ...
  }
}

class ProductService {

  private ProductRepository repository;                       <i class="conum" data-value="3"></i><b>(3)</b>

  public ProductService(ProductRepository repository) {
    this.repository = repository;
  }

  public Page&lt;Product&gt; findAvailableBookByName(String name, Pageable pageable) {
    return repository.findByAvailableTrueAndNameStartingWith(name, pageable);
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The <code>EnableElasticsearchRepositories</code> annotation activates the Repository support.
If no base package is configured, it will use the one of the configuration class it is put on.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Provide a Bean named <code>elasticsearchTemplate</code> of type <code>ElasticsearchOperations</code> by using one of the configurations shown in the <a href="#elasticsearch.operations">Elasticsearch Operations</a> chapter.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Let Spring inject the Repository bean into your class.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.cdi"><a class="anchor" href="#elasticsearch.cdi"></a>8.6. Elasticsearch Repositories using CDI</h3>
<div class="paragraph">
<p>The Spring Data Elasticsearch repositories can also be set up using CDI functionality.</p>
</div>
<div class="exampleblock">
<div class="title">Example 81. Spring Data Elasticsearch repositories using CDI</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class ElasticsearchTemplateProducer {

  @Produces
  @ApplicationScoped
  public ElasticsearchOperations createElasticsearchTemplate() {
    // ...                               <i class="conum" data-value="1"></i><b>(1)</b>
  }
}

class ProductService {

  private ProductRepository repository;  <i class="conum" data-value="2"></i><b>(2)</b>
  public Page&lt;Product&gt; findAvailableBookByName(String name, Pageable pageable) {
    return repository.findByAvailableTrueAndNameStartingWith(name, pageable);
  }
  @Inject
  public void setRepository(ProductRepository repository) {
    this.repository = repository;
  }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Create a component by using the same calls as are used in the <a href="#elasticsearch.operations">Elasticsearch Operations</a> chapter.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Let the CDI framework inject the Repository into your class.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.namespace"><a class="anchor" href="#elasticsearch.namespace"></a>8.7. Spring Namespace</h3>
<div class="paragraph">
<p>The Spring Data Elasticsearch module contains a custom namespace allowing definition of repository beans as well as elements for instantiating a <code>ElasticsearchServer</code> .</p>
</div>
<div class="paragraph">
<p>Using the <code>repositories</code> element looks up Spring Data repositories as described in <a href="#repositories.create-instances">Creating Repository Instances</a> .</p>
</div>
<div class="exampleblock">
<div class="title">Example 82. Setting up Elasticsearch repositories using Namespace</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/data/elasticsearch
       https://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd"&gt;

  &lt;elasticsearch:repositories base-package="com.acme.repositories" /&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>Using the <code>Transport Client</code> or <code>Rest Client</code> element registers an instance of <code>Elasticsearch Server</code> in the context.</p>
</div>
<div class="exampleblock">
<div class="title">Example 83. Transport Client using Namespace</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/data/elasticsearch
       https://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd"&gt;

  &lt;elasticsearch:transport-client id="client" cluster-nodes="localhost:9300,someip:9300" /&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 84. Rest Client using Namespace</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
       xsi:schemaLocation="http://www.springframework.org/schema/data/elasticsearch
       https://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd
       http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

  &lt;elasticsearch:rest-client id="restClient" hosts="http://localhost:9200"&gt;

&lt;/beans&gt;</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="auditing"><a class="anchor" href="#auditing"></a>9. Auditing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="auditing.basics"><a class="anchor" href="#auditing.basics"></a>9.1. Basics</h3>
<div class="paragraph">
<p>Spring Data provides sophisticated support to transparently keep track of who created or changed an entity and when the change happened. To benefit from that functionality, you have to equip your entity classes with auditing metadata that can be defined either using annotations or by implementing an interface.
Additionally, auditing has to be enabled either through Annotation configuration or XML configuration to register the required infrastructure components.
Please refer to the store-specific section for configuration samples.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Applications that only track creation and modification dates do not need to specify an <a href="#auditing.auditor-aware"><code>AuditorAware</code></a>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="auditing.annotations"><a class="anchor" href="#auditing.annotations"></a>9.1.1. Annotation-based Auditing Metadata</h4>
<div class="paragraph">
<p>We provide <code>@CreatedBy</code> and <code>@LastModifiedBy</code> to capture the user who created or modified the entity as well as <code>@CreatedDate</code> and <code>@LastModifiedDate</code> to capture when the change happened.</p>
</div>
<div class="exampleblock">
<div class="title">Example 85. An audited entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class Customer {

  @CreatedBy
  private User user;

  @CreatedDate
  private Instant createdDate;

  // … further properties omitted
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>As you can see, the annotations can be applied selectively, depending on which information you want to capture. The annotations capturing when changes were made can be used on properties of type Joda-Time, <code>DateTime</code>, legacy Java <code>Date</code> and <code>Calendar</code>, JDK8 date and time types, and <code>long</code> or <code>Long</code>.</p>
</div>
<div class="paragraph">
<p>Auditing metadata does not necessarily need to live in the root level entity but can be added to an embedded one (depending on the actual store in use), as shown in the snipped below.</p>
</div>
<div class="exampleblock">
<div class="title">Example 86. Audit metadata in embedded entity</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class Customer {

  private AuditMetadata auditingMetadata;

  // … further properties omitted
}

class AuditMetadata {

  @CreatedBy
  private User user;

  @CreatedDate
  private Instant createdDate;

}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="auditing.interfaces"><a class="anchor" href="#auditing.interfaces"></a>9.1.2. Interface-based Auditing Metadata</h4>
<div class="paragraph">
<p>In case you do not want to use annotations to define auditing metadata, you can let your domain class implement the <code>Auditable</code> interface. It exposes setter methods for all of the auditing properties.</p>
</div>
</div>
<div class="sect3">
<h4 id="auditing.auditor-aware"><a class="anchor" href="#auditing.auditor-aware"></a>9.1.3. <code>AuditorAware</code></h4>
<div class="paragraph">
<p>In case you use either <code>@CreatedBy</code> or <code>@LastModifiedBy</code>, the auditing infrastructure somehow needs to become aware of the current principal. To do so, we provide an <code>AuditorAware&lt;T&gt;</code> SPI interface that you have to implement to tell the infrastructure who the current user or system interacting with the application is. The generic type <code>T</code> defines what type the properties annotated with <code>@CreatedBy</code> or <code>@LastModifiedBy</code> have to be.</p>
</div>
<div class="paragraph">
<p>The following example shows an implementation of the interface that uses Spring Security&#8217;s <code>Authentication</code> object:</p>
</div>
<div class="exampleblock">
<div class="title">Example 87. Implementation of <code>AuditorAware</code> based on Spring Security</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class SpringSecurityAuditorAware implements AuditorAware&lt;User&gt; {

  @Override
  public Optional&lt;User&gt; getCurrentAuditor() {

    return Optional.ofNullable(SecurityContextHolder.getContext())
            .map(SecurityContext::getAuthentication)
            .filter(Authentication::isAuthenticated)
            .map(Authentication::getPrincipal)
            .map(User.class::cast);
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The implementation accesses the <code>Authentication</code> object provided by Spring Security and looks up the custom <code>UserDetails</code> instance that you have created in your <code>UserDetailsService</code> implementation. We assume here that you are exposing the domain user through the <code>UserDetails</code> implementation but that, based on the <code>Authentication</code> found, you could also look it up from anywhere.</p>
</div>
</div>
<div class="sect3">
<h4 id="auditing.reactive-auditor-aware"><a class="anchor" href="#auditing.reactive-auditor-aware"></a>9.1.4. <code>ReactiveAuditorAware</code></h4>
<div class="paragraph">
<p>When using reactive infrastructure you might want to make use of contextual information to provide <code>@CreatedBy</code> or <code>@LastModifiedBy</code> information.
We provide an <code>ReactiveAuditorAware&lt;T&gt;</code> SPI interface that you have to implement to tell the infrastructure who the current user or system interacting with the application is. The generic type <code>T</code> defines what type the properties annotated with <code>@CreatedBy</code> or <code>@LastModifiedBy</code> have to be.</p>
</div>
<div class="paragraph">
<p>The following example shows an implementation of the interface that uses reactive Spring Security&#8217;s <code>Authentication</code> object:</p>
</div>
<div class="exampleblock">
<div class="title">Example 88. Implementation of <code>ReactiveAuditorAware</code> based on Spring Security</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class SpringSecurityAuditorAware implements ReactiveAuditorAware&lt;User&gt; {

  @Override
  public Mono&lt;User&gt; getCurrentAuditor() {

    return ReactiveSecurityContextHolder.getContext()
                .map(SecurityContext::getAuthentication)
                .filter(Authentication::isAuthenticated)
                .map(Authentication::getPrincipal)
                .map(User.class::cast);
  }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The implementation accesses the <code>Authentication</code> object provided by Spring Security and looks up the custom <code>UserDetails</code> instance that you have created in your <code>UserDetailsService</code> implementation. We assume here that you are exposing the domain user through the <code>UserDetails</code> implementation but that, based on the <code>Authentication</code> found, you could also look it up from anywhere.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.auditing"><a class="anchor" href="#elasticsearch.auditing"></a>9.2. Elasticsearch Auditing</h3>
<div class="sect3">
<h4>9.2.1. Preparing entities</h4>
<div class="paragraph">
<p>In order for the auditing code to be able to decide whether an entity instance is new, the entity must implement the <code>Persistable&lt;ID&gt;</code> interface which is defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package org.springframework.data.domain;

import org.springframework.lang.Nullable;

public interface Persistable&lt;ID&gt; {
    @Nullable
    ID getId();

    boolean isNew();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As the existence of an Id is not a sufficient criterion to determine if an enitity is new in Elasticsearch, additional information is necessary. One way is to use the creation-relevant auditing fields for this decision:</p>
</div>
<div class="paragraph">
<p>A <code>Person</code> entity might look as follows - omitting getter and setter methods for brevity:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Document(indexName = "person")
public class Person implements Persistable&lt;Long&gt; {
    @Id private Long id;
    private String lastName;
    private String firstName;
    @CreatedDate
    @Field(type = FieldType.Date, format = DateFormat.basic_date_time)
    private Instant createdDate;
    @CreatedBy
    private String createdBy
    @Field(type = FieldType.Date, format = DateFormat.basic_date_time)
    @LastModifiedDate
    private Instant lastModifiedDate;
    @LastModifiedBy
    private String lastModifiedBy;

    public Long getId() {                                                 <i class="conum" data-value="1"></i><b>(1)</b>
        return id;
    }

    @Override
    public boolean isNew() {
        return id == null || (createdDate == null &amp;&amp; createdBy == null);  <i class="conum" data-value="2"></i><b>(2)</b>
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>the getter is the required implementation from the interface</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>an object is new if it either has no <code>id</code> or none of fields containing creation attributes are set.</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4>9.2.2. Activating auditing</h4>
<div class="paragraph">
<p>After the entities have been set up and providing the <code>AuditorAware</code> - or <code>ReactiveAuditorAware</code> - the Auditing must be activated by setting the <code>@EnableElasticsearchAuditing</code> on a configuration class:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
@EnableElasticsearchRepositories
@EnableElasticsearchAuditing
class MyConfiguration {
   // configuration code
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>When using the reactive stack this must be:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Configuration
@EnableReactiveElasticsearchRepositories
@EnableReactiveElasticsearchAuditing
class MyConfiguration {
   // configuration code
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If your code contains more than one <code>AuditorAware</code> bean for different types, you must provide the name of the bean to use as an argument to the <code>auditorAwareRef</code> parameter of the
<code>@EnableElasticsearchAuditing</code> annotation.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="entity-callbacks"><a class="anchor" href="#entity-callbacks"></a>10. Entity Callbacks</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Spring Data infrastructure provides hooks for modifying an entity before and after certain methods are invoked.
Those so called <code>EntityCallback</code> instances provide a convenient way to check and potentially modify an entity in a callback fashioned style.<br>
An <code>EntityCallback</code> looks pretty much like a specialized <code>ApplicationListener</code>.
Some Spring Data modules publish store specific events (such as <code>BeforeSaveEvent</code>) that allow modifying the given entity. In some cases, such as when working with immutable types, these events can cause trouble.
Also, event publishing relies on <code>ApplicationEventMulticaster</code>. If configuring that with an asynchronous <code>TaskExecutor</code> it can lead to unpredictable outcomes, as event processing can be forked onto a Thread.</p>
</div>
<div class="paragraph">
<p>Entity callbacks provide integration points with both synchronous and reactive APIs to guarantee in-order execution at well-defined checkpoints within the processing chain, returning a potentially modified entity or an reactive wrapper type.</p>
</div>
<div class="paragraph">
<p>Entity callbacks are typically separated by API type. This separation means that a synchronous API considers only synchronous entity callbacks and a reactive implementation considers only reactive entity callbacks.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The Entity Callback API has been introduced with Spring Data Commons 2.2. It is the recommended way of applying entity modifications.
Existing store specific <code>ApplicationEvents</code> are still published <strong>before</strong> the invoking potentially registered <code>EntityCallback</code> instances.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="entity-callbacks.implement"><a class="anchor" href="#entity-callbacks.implement"></a>10.1. Implementing Entity Callbacks</h3>
<div class="paragraph">
<p>An <code>EntityCallback</code> is directly associated with its domain type through its generic type argument.
Each Spring Data module typically ships with a set of predefined <code>EntityCallback</code> interfaces covering the entity lifecycle.</p>
</div>
<div class="exampleblock">
<div class="title">Example 89. Anatomy of an <code>EntityCallback</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@FunctionalInterface
public interface BeforeSaveCallback&lt;T&gt; extends EntityCallback&lt;T&gt; {

	/**
	 * Entity callback method invoked before a domain object is saved.
	 * Can return either the same or a modified instance.
	 *
	 * @return the domain object to be persisted.
	 */
	T onBeforeSave(T entity &lt;2&gt;, String collection &lt;3&gt;); <i class="conum" data-value="1"></i><b>(1)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>BeforeSaveCallback</code> specific method to be called before an entity is saved. Returns a potentially modifed instance.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The entity right before persisting.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A number of store specific arguments like the <em>collection</em> the entity is persisted to.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 90. Anatomy of a reactive <code>EntityCallback</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@FunctionalInterface
public interface ReactiveBeforeSaveCallback&lt;T&gt; extends EntityCallback&lt;T&gt; {

	/**
	 * Entity callback method invoked on subscription, before a domain object is saved.
	 * The returned Publisher can emit either the same or a modified instance.
	 *
	 * @return Publisher emitting the domain object to be persisted.
	 */
	Publisher&lt;T&gt; onBeforeSave(T entity &lt;2&gt;, String collection &lt;3&gt;); <i class="conum" data-value="1"></i><b>(1)</b>
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>BeforeSaveCallback</code> specific method to be called on subscription, before an entity is saved. Emits a potentially modifed instance.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The entity right before persisting.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>A number of store specific arguments like the <em>collection</em> the entity is persisted to.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Optional entity callback parameters are defined by the implementing Spring Data module and inferred from call site of <code>EntityCallback.callback()</code>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Implement the interface suiting your application needs like shown in the example below:</p>
</div>
<div class="exampleblock">
<div class="title">Example 91. Example <code>BeforeSaveCallback</code></div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">class DefaultingEntityCallback implements BeforeSaveCallback&lt;Person&gt;, Ordered {      <i class="conum" data-value="2"></i><b>(2)</b>

	@Override
	public Object onBeforeSave(Person entity, String collection) {                   <i class="conum" data-value="1"></i><b>(1)</b>

		if(collection == "user") {
		    return // ...
		}

		return // ...
	}

	@Override
	public int getOrder() {
		return 100;                                                                  <i class="conum" data-value="2"></i><b>(2)</b>
	}
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Callback implementation according to your requirements.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Potentially order the entity callback if multiple ones for the same domain type exist. Ordering follows lowest precedence.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="entity-callbacks.register"><a class="anchor" href="#entity-callbacks.register"></a>10.2. Registering Entity Callbacks</h3>
<div class="paragraph">
<p><code>EntityCallback</code> beans are picked up by the store specific implementations in case they are registered in the <code>ApplicationContext</code>.
Most template APIs already implement <code>ApplicationContextAware</code> and therefore have access to the <code>ApplicationContext</code></p>
</div>
<div class="paragraph">
<p>The following example explains a collection of valid entity callback registrations:</p>
</div>
<div class="exampleblock">
<div class="title">Example 92. Example <code>EntityCallback</code> Bean registration</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Order(1)                                                           <i class="conum" data-value="1"></i><b>(1)</b>
@Component
class First implements BeforeSaveCallback&lt;Person&gt; {

	@Override
	public Person onBeforeSave(Person person) {
		return // ...
	}
}

@Component
class DefaultingEntityCallback implements BeforeSaveCallback&lt;Person&gt;,
                                                           Ordered { <i class="conum" data-value="2"></i><b>(2)</b>

	@Override
	public Object onBeforeSave(Person entity, String collection) {
		// ...
	}

	@Override
	public int getOrder() {
		return 100;                                                  <i class="conum" data-value="2"></i><b>(2)</b>
	}
}

@Configuration
public class EntityCallbackConfiguration {

    @Bean
    BeforeSaveCallback&lt;Person&gt; unorderedLambdaReceiverCallback() {   <i class="conum" data-value="3"></i><b>(3)</b>
        return (BeforeSaveCallback&lt;Person&gt;) it -&gt; // ...
    }
}

@Component
class UserCallbacks implements BeforeConvertCallback&lt;User&gt;,
                                        BeforeSaveCallback&lt;User&gt; {   <i class="conum" data-value="4"></i><b>(4)</b>

	@Override
	public Person onBeforeConvert(User user) {
		return // ...
	}

	@Override
	public Person onBeforeSave(User user) {
		return // ...
	}
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>BeforeSaveCallback</code> receiving its order from the <code>@Order</code> annotation.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>BeforeSaveCallback</code> receiving its order via the <code>Ordered</code> interface implementation.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td><code>BeforeSaveCallback</code> using a lambda expression. Unordered by default and invoked last. Note that callbacks implemented by a lambda expression do not expose typing information hence invoking these with a non-assignable entity affects the callback throughput. Use a <code>class</code> or <code>enum</code> to enable type filtering for the callback bean.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Combine multiple entity callback interfaces in a single implementation class.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.entity-callbacks"><a class="anchor" href="#elasticsearch.entity-callbacks"></a>10.3. Elasticsearch EntityCallbacks</h3>
<div class="paragraph">
<p>Spring Data Elasticsearch uses the <code>EntityCallback</code> API internally for its auditing support and reacts on the following callbacks:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 3. Supported Entity Callbacks</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Callback</th>
<th class="tableblock halign-left valign-top">Method</th>
<th class="tableblock halign-left valign-top">Description</th>
<th class="tableblock halign-left valign-top">Order</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reactive/BeforeConvertCallback</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>onBeforeConvert(T entity, IndexCoordinates index)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Invoked before a domain object is converted to <code>org.springframework.data.elasticsearch.core.document.Document</code>. Can return the <code>entity</code> or a modified entity which then will be converted.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Ordered.LOWEST_PRECEDENCE</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reactive/AfterConvertCallback</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>onAfterConvert(T entity, Document document, IndexCoordinates indexCoordinates)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Invoked after a domain object is converted from <code>org.springframework.data.elasticsearch.core.document.Document</code> on reading result data from Elasticsearch.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Ordered.LOWEST_PRECEDENCE</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reactive/AuditingEntityCallback</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>onBeforeConvert(Object entity, IndexCoordinates index)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Marks an auditable entity <em>created</em> or <em>modified</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">100</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reactive/AfterSaveCallback</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>T onAfterSave(T entity, IndexCoordinates index)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Invoked after a domain object is saved.</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Ordered.LOWEST_PRECEDENCE</code></p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="elasticsearch.jointype"><a class="anchor" href="#elasticsearch.jointype"></a>11. Join-Type implementation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Data Elasticsearch supports the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/parent-join.html">Join data type</a> for creating the corresponding index mappings and for storing the relevant information.</p>
</div>
<div class="sect2">
<h3>11.1. Setting up the data</h3>
<div class="paragraph">
<p>For an entity to be used in a parent child join relationship, it must have a property of type <code>JoinField</code> which must be annotated.
Let&#8217;s assume a <code>Statement</code> entity where a statement may be a <em>question</em>, an <em>answer</em>, a <em>comment</em> or a <em>vote</em> (a <em>Builder</em> is also shown in this example, it&#8217;s not necessary, but later used in the sample code):</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Document(indexName = "statements")
@Routing("routing")                                                                       <i class="conum" data-value="1"></i><b>(1)</b>
public class Statement {
    @Id
    private String id;

    @Field(type = FieldType.Text)
    private String text;

    @Field(type = FieldType.Keyword)
    private String routing;

    @JoinTypeRelations(
        relations =
            {
                @JoinTypeRelation(parent = "question", children = {"answer", "comment"}), <i class="conum" data-value="2"></i><b>(2)</b>
                @JoinTypeRelation(parent = "answer", children = "vote")                   <i class="conum" data-value="3"></i><b>(3)</b>
            }
    )
    private JoinField&lt;String&gt; relation;                                                   <i class="conum" data-value="4"></i><b>(4)</b>

    private Statement() {
    }

    public static StatementBuilder builder() {
        return new StatementBuilder();
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getRouting() {
        return routing;
    }

    public void setRouting(Routing routing) {
        this.routing = routing;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public JoinField&lt;String&gt; getRelation() {
        return relation;
    }

    public void setRelation(JoinField&lt;String&gt; relation) {
        this.relation = relation;
    }

    public static final class StatementBuilder {
        private String id;
        private String text;
        private String routing;
        private JoinField&lt;String&gt; relation;

        private StatementBuilder() {
        }

        public StatementBuilder withId(String id) {
            this.id = id;
            return this;
        }

        public StatementBuilder withRouting(String routing) {
            this.routing = routing;
            return this;
        }

        public StatementBuilder withText(String text) {
            this.text = text;
            return this;
        }

        public StatementBuilder withRelation(JoinField&lt;String&gt; relation) {
            this.relation = relation;
            return this;
        }

        public Statement build() {
            Statement statement = new Statement();
            statement.setId(id);
            statement.setRouting(routing);
            statement.setText(text);
            statement.setRelation(relation);
            return statement;
        }
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>for routing related info see <a href="#elasticsearch.routing">Routing values</a></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>a question can have answers and comments</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>an answer can have votes</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>the <code>JoinField</code> property is used to combine the name (<em>question</em>, <em>answer</em>, <em>comment</em> or <em>vote</em>) of the relation with the parent id.
The generic type must be the same as the <code>@Id</code> annotated property.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>Spring Data Elasticsearch will build the following mapping for this class:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="json" class="language-json hljs">{
  "statements": {
    "mappings": {
      "properties": {
        "_class": {
          "type": "text",
          "fields": {
            "keyword": {
              "type": "keyword",
              "ignore_above": 256
            }
          }
        },
        "routing": {
          "type": "keyword"
        },
        "relation": {
          "type": "join",
          "eager_global_ordinals": true,
          "relations": {
            "question": [
              "answer",
              "comment"
            ],
            "answer": "vote"
          }
        },
        "text": {
          "type": "text"
        }
      }
    }
  }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3>11.2. Storing data</h3>
<div class="paragraph">
<p>Given a repository for this class the following code inserts a question, two answers, a comment and a vote:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">void init() {
    repository.deleteAll();

    Statement savedWeather = repository.save(
        Statement.builder()
            .withText("How is the weather?")
            .withRelation(new JoinField&lt;&gt;("question"))                          <i class="conum" data-value="1"></i><b>(1)</b>
            .build());

    Statement sunnyAnswer = repository.save(
        Statement.builder()
            .withText("sunny")
            .withRelation(new JoinField&lt;&gt;("answer", savedWeather.getId()))      <i class="conum" data-value="2"></i><b>(2)</b>
            .build());

    repository.save(
        Statement.builder()
            .withText("rainy")
            .withRelation(new JoinField&lt;&gt;("answer", savedWeather.getId()))      <i class="conum" data-value="3"></i><b>(3)</b>
            .build());

    repository.save(
        Statement.builder()
            .withText("I don't like the rain")
            .withRelation(new JoinField&lt;&gt;("comment", savedWeather.getId()))     <i class="conum" data-value="4"></i><b>(4)</b>
            .build());

    repository.save(
        Statement.builder()
            .withText("+1 for the sun")
            ,withRouting(savedWeather.getId())
            .withRelation(new JoinField&lt;&gt;("vote", sunnyAnswer.getId()))         <i class="conum" data-value="5"></i><b>(5)</b>
            .build());
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>create a question statement</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>the first answer to the question</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>the second answer</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>a comment to the question</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>a vote for the first answer, this needs to have the routing set to the weather document, see <a href="#elasticsearch.routing">Routing values</a>.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3>11.3. Retrieving data</h3>
<div class="paragraph">
<p>Currently native search queries must be used to query the data, so there is no support from standard repository methods. <a href="#repositories.custom-implementations">Custom Implementations for Spring Data Repositories</a> can be used instead.</p>
</div>
<div class="paragraph">
<p>The following code shows as an example how to retrieve all entries that have a <em>vote</em> (which must be <em>answers</em>, because only answers can have a vote) using an <code>ElasticsearchOperations</code> instance:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">SearchHits&lt;Statement&gt; hasVotes() {
    NativeSearchQuery query = new NativeSearchQueryBuilder()
        .withQuery(hasChildQuery("vote", matchAllQuery(), ScoreMode.None))
        .build();

    return operations.search(query, Statement.class);
}</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="elasticsearch.routing"><a class="anchor" href="#elasticsearch.routing"></a>12. Routing values</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When Elasticsearch stores a document in an index that has multiple shards, it determines the shard to you use based on the <em>id</em> of the document.
Sometimes it is necessary to predefine that multiple documents should be indexed on the same shard (join-types, faster search for related data).
For this Elasticsearch offers the possibility to define a routing, which is the value that should be used to calculate the shard from instead of the <em>id</em>.</p>
</div>
<div class="paragraph">
<p>Spring Data Elasticsearch supports routing definitions on storing and retrieving data in the following ways:</p>
</div>
<div class="sect2">
<h3>12.1. Routing on join-types</h3>
<div class="paragraph">
<p>When using join-types (see <a href="#elasticsearch.jointype">Join-Type implementation</a>), Spring Data Elasticsearch will automatically use the <code>parent</code> property of the entity&#8217;s <code>JoinField</code> property as the value for the routing.</p>
</div>
<div class="paragraph">
<p>This is correct for all the use-cases where the parent-child relationship has just one level.
If it is deeper, like a child-parent-grandparent relationship - like in the above example from <em>vote</em> &#8594; <em>answer</em> &#8594; <em>question</em> - then the routing needs to explicitly specified by using the techniques described in the next section (the <em>vote</em> needs the <em>question.id</em> as routing value).</p>
</div>
</div>
<div class="sect2">
<h3>12.2. Custom routing values</h3>
<div class="paragraph">
<p>To define a custom routing for an entity, Spring Data Elasticsearch provides a <code>@Routing</code> annotation (reusing the <code>Statement</code> class from above):</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Document(indexName = "statements")
@Routing("routing")                  <i class="conum" data-value="1"></i><b>(1)</b>
public class Statement {
    @Id
    private String id;

    @Field(type = FieldType.Text)
    private String text;

    @JoinTypeRelations(
        relations =
            {
                @JoinTypeRelation(parent = "question", children = {"answer", "comment"}),
                @JoinTypeRelation(parent = "answer", children = "vote")
            }
    )
    private JoinField&lt;String&gt; relation;

    @Nullable
    @Field(type = FieldType.Keyword)
    private String routing;          <i class="conum" data-value="2"></i><b>(2)</b>

    // getter/setter...
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>This defines <em>"routing"</em> as routing specification</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>a property with the name <em>routing</em></td>
</tr>
</table>
</div>
</div>
</div>
<div class="paragraph">
<p>If the <code>routing</code> specification of the annotation is a plain string and not a SpEL expression, it is interpreted as the name of a property of the entity, in the example it&#8217;s the <em>routing</em> property.
The value of this property will then be used as the routing value for all requests that use the entity.</p>
</div>
<div class="paragraph">
<p>It is also possible to us a SpEL expression in the <code>@Document</code> annotation like this:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Document(indexName = "statements")
@Routing("@myBean.getRouting(#entity)")
public class Statement{
    // all the needed stuff
}</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>In this case the user needs to provide a bean with the name <em>myBean</em> that has a method <code>String getRouting(Object)</code>. To reference the entity <em>"#entity"</em> must be used in the SpEL expression, and the return value must be <code>null</code> or the routing value as a String.</p>
</div>
<div class="paragraph">
<p>If plain property&#8217;s names and SpEL expressions are not enough to customize the routing definitions, it is possible to define provide an implementation of the <code>RoutingResolver</code> interface. This can then be set on the <code>ElasticOperations</code> instance:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">RoutingResolver resolver = ...;

ElasticsearchOperations customOperations= operations.withRouting(resolver);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>The <code>withRouting()</code> functions return a copy of the original <code>ElasticsearchOperations</code> instance with the customized routing set.</p>
</div>
<div class="paragraph">
<p>When a routing has been defined on an entity when it is stored in Elasticsearch, the same value must be provided when doing a <em>get</em> or <em>delete</em> operation. For methods that do not use an entity - like <code>get(ID)</code> or <code>delete(ID)</code> - the <code>ElasticsearchOperations.withRouting(RoutingResolver)</code> method can be used like this:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">String id = "someId";
String routing = "theRoutingValue";

// get an entity
Statement s = operations
                .withRouting(RoutingResolver.just(routing))       <i class="conum" data-value="1"></i><b>(1)</b>
                .get(id, Statement.class);

// delete an entity
operations.withRouting(RoutingResolver.just(routing)).delete(id);</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>RoutingResolver.just(s)</code> returns a resolver that will just return the given String.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="elasticsearch.misc"><a class="anchor" href="#elasticsearch.misc"></a>13. Miscellaneous Elasticsearch Operation Support</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This chapter covers additional support for Elasticsearch operations that cannot be directly accessed via the repository interface.
It is recommended to add those operations as custom implementation as described in <a href="#repositories.custom-implementations">Custom Implementations for Spring Data Repositories</a> .</p>
</div>
<div class="sect2">
<h3 id="elasticsearc.misc.index.settings"><a class="anchor" href="#elasticsearc.misc.index.settings"></a>13.1. Index settings</h3>
<div class="paragraph">
<p>When creating Elasticsearch indices with Spring Data Elasticsearch different index settings can be defined by using the <code>@Setting</code> annotation. The following arguments are available:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>useServerConfiguration</code> does not send any settings parameters, so the Elasticsearch server configuration determines them.</p>
</li>
<li>
<p><code>settingPath</code> refers to a JSON file defining the settings that must be resolvable in the classpath</p>
</li>
<li>
<p><code>shards</code> the number of shards to use, defaults to <em>1</em></p>
</li>
<li>
<p><code>replicas</code> the number of replicas, defaults to <em>1</em></p>
</li>
<li>
<p><code>refreshIntervall</code>, defaults to <em>"1s"</em></p>
</li>
<li>
<p><code>indexStoreType</code>, defaults to <em>"fs"</em></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>It is as well possible to define <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.11/index-modules-index-sorting.html">index sorting</a> (check the linked Elasticsearch documentation for the possible field types and values):</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Document(indexName = "entities")
@Setting(
  sortFields = { "secondField", "firstField" },                                  <i class="conum" data-value="1"></i><b>(1)</b>
  sortModes = { Setting.SortMode.max, Setting.SortMode.min },                    <i class="conum" data-value="2"></i><b>(2)</b>
  sortOrders = { Setting.SortOrder.desc, Setting.SortOrder.asc },
  sortMissingValues = { Setting.SortMissing._last, Setting.SortMissing._first })
class Entity {
    @Nullable
    @Id private String id;

    @Nullable
    @Field(name = "first_field", type = FieldType.Keyword)
    private String firstField;

    @Nullable @Field(name = "second_field", type = FieldType.Keyword)
    private String secondField;

    // getter and setter...
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>when defining sort fields, use the name of the Java property (<em>firstField</em>), not the name that might be defined for Elasticsearch (<em>first_field</em>)</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>sortModes</code>, <code>sortOrders</code> and <code>sortMissingValues</code> are optional, but if they are set, the number of entries must match the number of <code>sortFields</code> elements</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.misc.filter"><a class="anchor" href="#elasticsearch.misc.filter"></a>13.2. Filter Builder</h3>
<div class="paragraph">
<p>Filter Builder improves query speed.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">private ElasticsearchOperations operations;

IndexCoordinates index = IndexCoordinates.of("sample-index");

SearchQuery searchQuery = new NativeSearchQueryBuilder()
  .withQuery(matchAllQuery())
  .withFilter(boolFilter().must(termFilter("id", documentId)))
  .build();

Page&lt;SampleEntity&gt; sampleEntities = operations.searchForPage(searchQuery, SampleEntity.class, index);</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.scroll"><a class="anchor" href="#elasticsearch.scroll"></a>13.3. Using Scroll For Big Result Set</h3>
<div class="paragraph">
<p>Elasticsearch has a scroll API for getting big result set in chunks.
This is internally used by Spring Data Elasticsearch to provide the implementations of the <code>&lt;T&gt; SearchHitsIterator&lt;T&gt; SearchOperations.searchForStream(Query query, Class&lt;T&gt; clazz, IndexCoordinates index)</code> method.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">IndexCoordinates index = IndexCoordinates.of("sample-index");

SearchQuery searchQuery = new NativeSearchQueryBuilder()
  .withQuery(matchAllQuery())
  .withFields("message")
  .withPageable(PageRequest.of(0, 10))
  .build();

SearchHitsIterator&lt;SampleEntity&gt; stream = elasticsearchTemplate.searchForStream(searchQuery, SampleEntity.class, index);

List&lt;SampleEntity&gt; sampleEntities = new ArrayList&lt;&gt;();
while (stream.hasNext()) {
  sampleEntities.add(stream.next());
}

stream.close();</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>There are no methods in the <code>SearchOperations</code> API to access the scroll id, if it should be necessary to access this, the following methods of the <code>ElasticsearchRestTemplate</code> can be used:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Autowired ElasticsearchRestTemplate template;

IndexCoordinates index = IndexCoordinates.of("sample-index");

SearchQuery searchQuery = new NativeSearchQueryBuilder()
  .withQuery(matchAllQuery())
  .withFields("message")
  .withPageable(PageRequest.of(0, 10))
  .build();

SearchScrollHits&lt;SampleEntity&gt; scroll = template.searchScrollStart(1000, searchQuery, SampleEntity.class, index);

String scrollId = scroll.getScrollId();
List&lt;SampleEntity&gt; sampleEntities = new ArrayList&lt;&gt;();
while (scroll.hasSearchHits()) {
  sampleEntities.addAll(scroll.getSearchHits());
  scrollId = scroll.getScrollId();
  scroll = template.searchScrollContinue(scrollId, 1000, SampleEntity.class);
}
template.searchScrollClear(scrollId);</code></pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>To use the Scroll API with repository methods, the return type must defined as <code>Stream</code> in the Elasticsearch Repository.
The implementation of the method will then use the scroll methods from the ElasticsearchTemplate.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">interface SampleEntityRepository extends Repository&lt;SampleEntity, String&gt; {

    Stream&lt;SampleEntity&gt; findBy();

}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch.misc.sorts"><a class="anchor" href="#elasticsearch.misc.sorts"></a>13.4. Sort options</h3>
<div class="paragraph">
<p>In addition to the default sort options described <a href="#repositories.paging-and-sorting">Paging and Sorting</a> Spring Data Elasticsearch has a <code>GeoDistanceOrder</code> class which can be used to have the result of a search operation ordered by geographical distance.</p>
</div>
<div class="paragraph">
<p>If the class to be retrieved has a <code>GeoPoint</code> property named <em>location</em>, the following <code>Sort</code> would sort the results by distance to the given point:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">Sort.by(new GeoDistanceOrder("location", new GeoPoint(48.137154, 11.5761247)))</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h1 id="appendix" class="sect0"><a class="anchor" href="#appendix"></a>Appendix</h1>
<div class="sect1">
<h2 id="repositories.namespace-reference"><a class="anchor" href="#repositories.namespace-reference"></a>Appendix A: Namespace reference</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="populator.namespace-dao-config"><a class="anchor" href="#populator.namespace-dao-config"></a>The <code>&lt;repositories /&gt;</code> Element</h3>
<div class="paragraph">
<p>The <code>&lt;repositories /&gt;</code> element triggers the setup of the Spring Data repository infrastructure. The most important attribute is <code>base-package</code>, which defines the package to scan for Spring Data repository interfaces. See &#8220;<a href="#repositories.create-instances.spring">XML Configuration</a>&#8221;. The following table describes the attributes of the <code>&lt;repositories /&gt;</code> element:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 4. Attributes</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>base-package</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines the package to be scanned for repository interfaces that extend <code>*Repository</code> (the actual interface is determined by the specific Spring Data module) in auto-detection mode. All packages below the configured package are scanned, too. Wildcards are allowed.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>repository-impl-postfix</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines the postfix to autodetect custom repository implementations. Classes whose names end with the configured postfix are considered as candidates. Defaults to <code>Impl</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>query-lookup-strategy</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Determines the strategy to be used to create finder queries. See &#8220;<a href="#repositories.query-methods.query-lookup-strategies">Query Lookup Strategies</a>&#8221; for details. Defaults to <code>create-if-not-found</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>named-queries-location</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Defines the location to search for a Properties file containing externally defined queries.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>consider-nested-repositories</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Whether nested repository interface definitions should be considered. Defaults to <code>false</code>.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="populator.namespace-reference"><a class="anchor" href="#populator.namespace-reference"></a>Appendix B: Populators namespace reference</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="namespace-dao-config"><a class="anchor" href="#namespace-dao-config"></a>The &lt;populator /&gt; element</h3>
<div class="paragraph">
<p>The <code>&lt;populator /&gt;</code> element allows to populate the a data store via the Spring Data repository infrastructure.<sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnotedef_2" title="View footnote.">2</a>]</sup></p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 5. Attributes</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>locations</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Where to find the files to read the objects from the repository shall be populated with.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="repository-query-keywords"><a class="anchor" href="#repository-query-keywords"></a>Appendix C: Repository query keywords</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="appendix.query.method.subject"><a class="anchor" href="#appendix.query.method.subject"></a>Supported query method subject keywords</h3>
<div class="paragraph">
<p>The following table lists the subject keywords generally supported by the Spring Data repository query derivation mechanism to express the predicate.
Consult the store-specific documentation for the exact list of supported keywords, because some keywords listed here might not be supported in a particular store.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 6. Query subject keywords</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Keyword</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>find…By</code>, <code>read…By</code>, <code>get…By</code>, <code>query…By</code>, <code>search…By</code>, <code>stream…By</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">General query method returning typically the repository type, a <code>Collection</code> or <code>Streamable</code> subtype or a result wrapper such as <code>Page</code>, <code>GeoResults</code> or any other store-specific result wrapper. Can be used as <code>findBy…</code>, <code>findMyDomainTypeBy…</code> or in combination with additional keywords.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>exists…By</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Exists projection, returning typically a <code>boolean</code> result.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>count…By</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Count projection returning a numeric result.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>delete…By</code>, <code>remove…By</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Delete query method returning either no result (<code>void</code>) or the delete count.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>…First&lt;number&gt;…</code>, <code>…Top&lt;number&gt;…</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Limit the query results to the first <code>&lt;number&gt;</code> of results. This keyword can occur in any place of the subject between <code>find</code> (and the other keywords) and <code>by</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>…Distinct…</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Use a distinct query to return only unique results. Consult the store-specific documentation whether that feature is supported. This keyword can occur in any place of the subject between <code>find</code> (and the other keywords) and <code>by</code>.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="appendix.query.method.predicate"><a class="anchor" href="#appendix.query.method.predicate"></a>Supported query method predicate keywords and modifiers</h3>
<div class="paragraph">
<p>The following table lists the predicate keywords generally supported by the Spring Data repository query derivation mechanism.
However, consult the store-specific documentation for the exact list of supported keywords, because some keywords listed here might not be supported in a particular store.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 7. Query predicate keywords</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Logical keyword</th>
<th class="tableblock halign-left valign-top">Keyword expressions</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AND</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>And</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>OR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Or</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AFTER</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>After</code>, <code>IsAfter</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>BEFORE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Before</code>, <code>IsBefore</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>CONTAINING</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Containing</code>, <code>IsContaining</code>, <code>Contains</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>BETWEEN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Between</code>, <code>IsBetween</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ENDING_WITH</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EndingWith</code>, <code>IsEndingWith</code>, <code>EndsWith</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EXISTS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Exists</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>FALSE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>False</code>, <code>IsFalse</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GREATER_THAN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThan</code>, <code>IsGreaterThan</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GREATER_THAN_EQUALS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GreaterThanEqual</code>, <code>IsGreaterThanEqual</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>In</code>, <code>IsIn</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Is</code>, <code>Equals</code>, (or no keyword)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_EMPTY</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsEmpty</code>, <code>Empty</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NOT_EMPTY</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IsNotEmpty</code>, <code>NotEmpty</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NOT_NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotNull</code>, <code>IsNotNull</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IS_NULL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Null</code>, <code>IsNull</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LESS_THAN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThan</code>, <code>IsLessThan</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LESS_THAN_EQUAL</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LessThanEqual</code>, <code>IsLessThanEqual</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>LIKE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Like</code>, <code>IsLike</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NEAR</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Near</code>, <code>IsNear</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Not</code>, <code>IsNot</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT_IN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotIn</code>, <code>IsNotIn</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NOT_LIKE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>NotLike</code>, <code>IsNotLike</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>REGEX</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Regex</code>, <code>MatchesRegex</code>, <code>Matches</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>STARTING_WITH</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StartingWith</code>, <code>IsStartingWith</code>, <code>StartsWith</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>TRUE</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>True</code>, <code>IsTrue</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>WITHIN</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Within</code>, <code>IsWithin</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>In addition to filter predicates, the following list of modifiers is supported:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 8. Query predicate modifier keywords</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Keyword</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>IgnoreCase</code>, <code>IgnoringCase</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Used with a predicate keyword for case-insensitive comparison.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>AllIgnoreCase</code>, <code>AllIgnoringCase</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Ignore case for all suitable properties. Used somewhere in the query method predicate.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>OrderBy…</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Specify a static sorting order followed by the property path and direction (e. g. <code>OrderByFirstnameAscLastnameDesc</code>).</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="repository-query-return-types"><a class="anchor" href="#repository-query-return-types"></a>Appendix D: Repository query return types</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="appendix.query.return.types"><a class="anchor" href="#appendix.query.return.types"></a>Supported Query Return Types</h3>
<div class="paragraph">
<p>The following table lists the return types generally supported by Spring Data repositories.
However, consult the store-specific documentation for the exact list of supported return types, because some types listed here might not be supported in a particular store.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Geospatial types (such as <code>GeoResult</code>, <code>GeoResults</code>, and <code>GeoPage</code>) are available only for data stores that support geospatial queries.
Some store modules may define their own result wrapper types.
</td>
</tr>
</table>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 9. Query return types</caption>
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Return type</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>void</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Denotes no return value.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Primitives</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Java primitives.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wrapper types</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Java wrapper types.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>T</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A unique entity. Expects the query method to return one result at most. If no result is found, <code>null</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Iterator&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">An <code>Iterator</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Collection&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Collection</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>List&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>List</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Optional&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 or Guava <code>Optional</code>. Expects the query method to return one result at most. If no result is found, <code>Optional.empty()</code> or <code>Optional.absent()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Option&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Either a Scala or Vavr <code>Option</code> type. Semantically the same behavior as Java 8&#8217;s <code>Optional</code>, described earlier.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Stream&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 <code>Stream</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Streamable&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A convenience extension of <code>Iterable</code> that directy exposes methods to stream, map and filter results, concatenate them etc.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Types that implement <code>Streamable</code> and take a <code>Streamable</code> constructor or factory method argument</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Types that expose a constructor or <code>….of(…)</code>/<code>….valueOf(…)</code> factory method taking a <code>Streamable</code> as argument. See <a href="#repositories.collections-and-iterables.streamable-wrapper">Returning Custom Streamable Wrapper Types</a> for details.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Vavr <code>Seq</code>, <code>List</code>, <code>Map</code>, <code>Set</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Vavr collection types. See <a href="#repositories.collections-and-iterables.vavr">Support for Vavr Collections</a> for details.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Future&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Future</code>. Expects a method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability to be enabled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>CompletableFuture&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Java 8 <code>CompletableFuture</code>. Expects a method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability to be enabled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ListenableFuture</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>org.springframework.util.concurrent.ListenableFuture</code>. Expects a method to be annotated with <code>@Async</code> and requires Spring&#8217;s asynchronous method execution capability to be enabled.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Slice&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A sized chunk of data with an indication of whether there is more data available. Requires a <code>Pageable</code> method parameter.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Page&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Slice</code> with additional information, such as the total number of results. Requires a <code>Pageable</code> method parameter.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoResult&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A result entry with additional information, such as the distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoResults&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A list of <code>GeoResult&lt;T&gt;</code> with additional information, such as the average distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>GeoPage&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A <code>Page</code> with <code>GeoResult&lt;T&gt;</code>, such as the average distance to a reference location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Mono&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Project Reactor <code>Mono</code> emitting zero or one element using reactive repositories. Expects the query method to return one result at most. If no result is found, <code>Mono.empty()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Flux&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A Project Reactor <code>Flux</code> emitting zero, one, or many elements using reactive repositories. Queries returning <code>Flux</code> can emit also an infinite number of elements.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Single&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A RxJava <code>Single</code> emitting a single element using reactive repositories. Expects the query method to return one result at most. If no result is found, <code>Mono.empty()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Maybe&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A RxJava <code>Maybe</code> emitting zero or one element using reactive repositories. Expects the query method to return one result at most. If no result is found, <code>Mono.empty()</code> is returned. More than one result triggers an <code>IncorrectResultSizeDataAccessException</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Flowable&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A RxJava <code>Flowable</code> emitting zero, one, or many elements using reactive repositories. Queries returning <code>Flowable</code> can emit also an infinite number of elements.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="elasticsearch.migration"><a class="anchor" href="#elasticsearch.migration"></a>Appendix E: Migration Guides</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="elasticsearch-migration-guide-3.2-4.0"><a class="anchor" href="#elasticsearch-migration-guide-3.2-4.0"></a>Upgrading from 3.2.x to 4.0.x</h3>
<div class="paragraph">
<p>This section describes breaking changes from version 3.2.x to 4.0.x and how removed features can be replaced by new introduced features.</p>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-3.2-4.0.jackson-removal"><a class="anchor" href="#elasticsearch-migration-guide-3.2-4.0.jackson-removal"></a>Removal of the used Jackson Mapper</h4>
<div class="paragraph">
<p>One of the changes in version 4.0.x is that Spring Data Elasticsearch does not use the Jackson Mapper anymore to map an entity to the JSON representation needed for Elasticsearch (see <a href="#elasticsearch.mapping">Elasticsearch Object Mapping</a>). In version 3.2.x the Jackson Mapper was the default that was used. It was possible to switch to the meta-model based converter (named <code>ElasticsearchEntityMapper</code>) by explicitly configuring it (<a href="#elasticsearch.mapping.meta-model">Meta Model Object Mapping</a>).</p>
</div>
<div class="paragraph">
<p>In version 4.0.x the meta-model based converter is the only one that is available and does not need to be configured explicitly. If you had a custom configuration to enable the meta-model converter by providing a bean like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">@Bean
@Override
public EntityMapper entityMapper() {

  ElasticsearchEntityMapper entityMapper = new ElasticsearchEntityMapper(
    elasticsearchMappingContext(), new DefaultConversionService()
  );
  entityMapper.setConversions(elasticsearchCustomConversions());

  return entityMapper;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You now have to remove this bean, the <code>ElasticsearchEntityMapper</code> interface has been removed.</p>
</div>
<div class="paragraph">
<div class="title">Entity configuration</div>
<p>Some users had custom Jackson annotations on the entity class, for example in order to define a custom name for the mapped document in Elasticsearch or to configure date conversions. These are not taken into account anymore. The needed functionality is now provided with Spring Data Elasticsearch&#8217;s <code>@Field</code> annotation. Please see <a href="#elasticsearch.mapping.meta-model.annotations">Mapping Annotation Overview</a> for detailed information.</p>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-3.2-4.0.implicit-index-name"><a class="anchor" href="#elasticsearch-migration-guide-3.2-4.0.implicit-index-name"></a>Removal of implicit index name from query objects</h4>
<div class="paragraph">
<p>In 3.2.x the different query classes like <code>IndexQuery</code> or <code>SearchQuery</code> had properties that were taking the index name or index names that they were operating upon. If these were not set, the passed in entity was inspected to retrieve the index name that was set in the <code>@Document</code> annotation.<br>
In 4.0.x the index name(s) must now be provided in an additional parameter of type <code>IndexCoordinates</code>. By separating this, it now is possible to use one query object against different indices.</p>
</div>
<div class="paragraph">
<p>So for example the following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">IndexQuery indexQuery = new IndexQueryBuilder()
  .withId(person.getId().toString())
  .withObject(person)
  .build();

String documentId = elasticsearchOperations.index(indexQuery);</code></pre>
</div>
</div>
<div class="paragraph">
<p>must be changed to:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">IndexCoordinates indexCoordinates = elasticsearchOperations.getIndexCoordinatesFor(person.getClass());

IndexQuery indexQuery = new IndexQueryBuilder()
  .withId(person.getId().toString())
  .withObject(person)
  .build();

String documentId = elasticsearchOperations.index(indexQuery, indexCoordinates);</code></pre>
</div>
</div>
<div class="paragraph">
<p>To make it easier to work with entities and use the index name that is contained in the entitie&#8217;s <code>@Document</code> annotation, new methods have been added like <code>DocumentOperations.save(T entity)</code>;</p>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-3.2-4.0.new-operations"><a class="anchor" href="#elasticsearch-migration-guide-3.2-4.0.new-operations"></a>The new Operations interfaces</h4>
<div class="paragraph">
<p>In version 3.2 there was the <code>ElasticsearchOperations</code> interface that defined all the methods for the <code>ElasticsearchTemplate</code> class. In version 4 the functions have been split into different interfaces, aligning these interfaces with the Elasticsearch API:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DocumentOperations</code> are the functions related documents like saving, or deleting</p>
</li>
<li>
<p><code>SearchOperations</code> contains the functions to search in Elasticsearch</p>
</li>
<li>
<p><code>IndexOperations</code> define the functions to operate on indexes, like index creation or mappings creation.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><code>ElasticsearchOperations</code> now extends <code>DocumentOperations</code> and <code>SearchOperations</code> and has methods get access to an <code>IndexOperations</code> instance.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
All the functions from the <code>ElasticsearchOperations</code> interface in version 3.2 that are now moved to the <code>IndexOperations</code> interface are still available, they are marked as deprecated and have default implementations that delegate to the new implementation:
</td>
</tr>
</table>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">/**
 * Create an index for given indexName.
 *
 * @param indexName the name of the index
 * @return {@literal true} if the index was created
 * @deprecated since 4.0, use {@link IndexOperations#create()}
 */
@Deprecated
default boolean createIndex(String indexName) {
	return indexOps(IndexCoordinates.of(indexName)).create();
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-3.2-4.0.deprecations"><a class="anchor" href="#elasticsearch-migration-guide-3.2-4.0.deprecations"></a>Deprecations</h4>
<div class="sect4">
<h5>Methods and classes</h5>
<div class="paragraph">
<p>Many functions and classes have been deprecated. These functions still work, but the Javadocs show with what they should be replaced.</p>
</div>
<div class="listingblock">
<div class="title">Example from ElasticsearchOperations</div>
<div class="content">
<pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">/*
 * Retrieves an object from an index.
 *
 * @param query the query defining the id of the object to get
 * @param clazz the type of the object to be returned
 * @return the found object
 * @deprecated since 4.0, use {@link #get(String, Class, IndexCoordinates)}
 */
@Deprecated
@Nullable
&lt;T&gt; T queryForObject(GetQuery query, Class&lt;T&gt; clazz);</code></pre>
</div>
</div>
</div>
<div class="sect4">
<h5>Elasticsearch deprecations</h5>
<div class="paragraph">
<p>Since version 7 the Elasticsearch <code>TransportClient</code> is deprecated, it will be removed with Elasticsearch version 8. Spring Data Elasticsearch deprecates the <code>ElasticsearchTemplate</code> class which uses the <code>TransportClient</code> in version 4.0.</p>
</div>
<div class="paragraph">
<p>Mapping types were removed from Elasticsearch 7, they still exist as deprecated values in the Spring Data <code>@Document</code> annotation and the <code>IndexCoordinates</code> class but they are not used anymore internally.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-3.2-4.0.removal"><a class="anchor" href="#elasticsearch-migration-guide-3.2-4.0.removal"></a>Removals</h4>
<div class="ulist">
<ul>
<li>
<p>As already described, the <code>ElasticsearchEntityMapper</code> interface has been removed.</p>
</li>
<li>
<p>The <code>SearchQuery</code> interface has been merged into it&#8217;s base interface <code>Query</code>, so it&#8217;s occurrences can just be replaced with <code>Query</code>.</p>
</li>
<li>
<p>The method <code>org.springframework.data.elasticsearch.core.ElasticsearchOperations.query(SearchQuery query, ResultsExtractor&lt;T&gt; resultsExtractor);</code> and the <code>org.springframework.data.elasticsearch.core.ResultsExtractor</code> interface have been removed. These could be used to parse the result from Elasticsearch for cases in which the response mapping done with the Jackson based mapper was not enough. Since version 4.0, there are the new <a href="#elasticsearch.operations.searchresulttypes">Search Result Types</a> to return the information from an Elasticsearch response, so there is no need to expose this low level functionality.</p>
</li>
<li>
<p>The low level methods <code>startScroll</code>, <code>continueScroll</code> and <code>clearScroll</code> have been removed from the <code>ElasticsearchOperations</code> interface. For low level scroll API access, there now are <code>searchScrollStart</code>, <code>searchScrollContinue</code> and <code>searchScrollClear</code> methods on the <code>ElasticsearchRestTemplate</code> class.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch-migration-guide-4.0-4.1"><a class="anchor" href="#elasticsearch-migration-guide-4.0-4.1"></a>Upgrading from 4.0.x to 4.1.x</h3>
<div class="paragraph">
<p>This section describes breaking changes from version 4.0.x to 4.1.x and how removed features can be replaced by new introduced features.</p>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-4.0-4.1.deprecations"><a class="anchor" href="#elasticsearch-migration-guide-4.0-4.1.deprecations"></a>Deprecations</h4>
<div class="paragraph">
<div class="title">Definition of the id property</div>
<p>It is possible to define a property of en entity as the id property by naming it either <code>id</code> or <code>document</code>.
This behaviour is now deprecated and will produce a warning.
PLease us the <code>@Id</code> annotation to mark a property as being the id property.</p>
</div>
<div class="paragraph">
<div class="title">Index mappings</div>
<p>In the <code>ReactiveElasticsearchClient.Indices</code> interface the <code>updateMapping</code> methods are deprecated in favour of the <code>putMapping</code> methods.
They do the same, but <code>putMapping</code> is consistent with the naming in the Elasticsearch API:</p>
</div>
<div class="paragraph">
<div class="title">Alias handling</div>
<p>In the <code>IndexOperations</code> interface the methods <code>addAlias(AliasQuery)</code>, <code>removeAlias(AliasQuery)</code> and <code>queryForAlias()</code> have been deprecated.
The new methods <code>alias(AliasAction)</code>, <code>getAliases(String&#8230;&#8203;)</code> and <code>getAliasesForIndex(String&#8230;&#8203;)</code> offer more functionality and a cleaner API.</p>
</div>
<div class="paragraph">
<div class="title">Parent-ID</div>
<p>Usage of a parent-id has been removed from Elasticsearch since version 6. We now deprecate the corresponding fields and methods.</p>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-4.0-4.1.removal"><a class="anchor" href="#elasticsearch-migration-guide-4.0-4.1.removal"></a>Removals</h4>
<div class="paragraph">
<div class="title">Type mappings</div>
<p>The <em>type mappings</em> parameters of the <code>@Document</code> annotation and the <code>IndexCoordinates</code> object were removed.
They had been deprecated in Spring Data Elasticsearch 4.0 and their values weren&#8217;t used anymore.</p>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-4.0-4.1.breaking-changes"><a class="anchor" href="#elasticsearch-migration-guide-4.0-4.1.breaking-changes"></a>Breaking Changes</h4>
<div class="sect4">
<h5>Return types of ReactiveElasticsearchClient.Indices methods</h5>
<div class="paragraph">
<p>The methods in the <code>ReactiveElasticsearchClient.Indices</code> were not used up to now.
With the introduction of the <code>ReactiveIndexOperations</code> it became necessary to change some of the return types:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the <code>createIndex</code> variants now return a <code>Mono&lt;Boolean&gt;</code> instead of a <code>Mono&lt;Void&gt;</code> to signal successful index creation.</p>
</li>
<li>
<p>the <code>updateMapping</code> variants now return a <code>Mono&lt;Boolean&gt;</code> instead of a <code>Mono&lt;Void&gt;</code> to signal successful mappings storage.</p>
</li>
</ul>
</div>
</div>
<div class="sect4">
<h5>Return types of DocumentOperartions.bulkIndex methods</h5>
<div class="paragraph">
<p>These methods were returing a <code>List&lt;String&gt;</code> containing the ids of the new indexed records.
Now they return a <code>List&lt;IndexedObjectInformation&gt;</code>; these objects contain the id and information about optimistic locking (seq_no and primary_term)</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="elasticsearch-migration-guide-4.1-4.2"><a class="anchor" href="#elasticsearch-migration-guide-4.1-4.2"></a>Upgrading from 4.1.x to 4.2.x</h3>
<div class="paragraph">
<p>This section describes breaking changes from version 4.1.x to 4.2.x and how removed features can be replaced by new introduced features.</p>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-4.1-4.2.deprecations"><a class="anchor" href="#elasticsearch-migration-guide-4.1-4.2.deprecations"></a>Deprecations</h4>
<div class="sect4">
<h5>@Document parameters</h5>
<div class="paragraph">
<p>The parameters of the <code>@Document</code> annotation that are relevant for the index settings (<code>useServerConfiguration</code>, <code>shards</code>. <code>replicas</code>, <code>refreshIntervall</code> and <code>indexStoretype</code>) have been moved to the <code>@Setting</code> annotation. Use in <code>@Document</code> is still possible but deprecated.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-4.1-4.2.removal"><a class="anchor" href="#elasticsearch-migration-guide-4.1-4.2.removal"></a>Removals</h4>
<div class="paragraph">
<p>The <code>@Score</code> annotation that was used to set the score return value in an entity was deprecated in version 4.0 and has been removed.
Scroe values are returned in the <code>SearchHit</code> instances that encapsulate the returned entities.</p>
</div>
<div class="paragraph">
<p>The <code>org.springframework.data.elasticsearch.ElasticsearchException</code> class has been removed.
The remaining usages have been replaced with <code>org.springframework.data.mapping.MappingException</code> and <code>org.springframework.dao.InvalidDataAccessApiUsageException</code>.</p>
</div>
<div class="paragraph">
<p>The deprecated <code>ScoredPage</code>, <code>ScrolledPage</code> <code>@AggregatedPage</code> and implementations has been removed.</p>
</div>
<div class="paragraph">
<p>The deprecated <code>GetQuery</code> and <code>DeleteQuery</code> have been removed.</p>
</div>
<div class="paragraph">
<p>The deprecated <code>find</code> methods from <code>ReactiveSearchOperations</code> and <code>ReactiveDocumentOperations</code> have been removed.</p>
</div>
</div>
<div class="sect3">
<h4 id="elasticsearch-migration-guide-4.1-4.2.breaking-changes"><a class="anchor" href="#elasticsearch-migration-guide-4.1-4.2.breaking-changes"></a>Breaking Changes</h4>
<div class="sect4">
<h5>RefreshPolicy</h5>
<div class="sect5">
<h6>Enum package changed</h6>
<div class="paragraph">
<p>It was possible in 4.1 to configure the refresh policy for the <code>ReactiveElasticsearchTemplate</code> by overriding the method <code>AbstractReactiveElasticsearchConfiguration.refreshPolicy()</code> in a custom configuration class.
The return value of this method was an instance of the class <code>org.elasticsearch.action.support.WriteRequest.RefreshPolicy</code>.</p>
</div>
<div class="paragraph">
<p>Now the configuration must return <code>org.springframework.data.elasticsearch.core.RefreshPolicy</code>.
This enum has the same values and triggers the same behaviour as before, so only the <code>import</code> statement has to be adjusted.</p>
</div>
</div>
<div class="sect5">
<h6>Refresh behaviour</h6>
<div class="paragraph">
<p><code>ElasticsearchOperations</code> and <code>ReactiveElasticsearchOperations</code> now explicitly use the <code>RefreshPolicy</code> set on the template for write requests if not null.
If the refresh policy is null, then nothing special is done, so the cluster defaults are used. <code>ElasticsearchOperations</code> was always using the cluster default before this version.</p>
</div>
<div class="paragraph">
<p>The provided implementations for <code>ElasticsearchRepository</code> and <code>ReactiveElasticsearchRepository</code> will do an explicit refresh when the refresh policy is null.
This is the same behaviour as in previous versions.
If a refresh policy is set, then it will be used by the repositories as well.</p>
</div>
</div>
<div class="sect5">
<h6>Refresh configuration</h6>
<div class="paragraph">
<p>When configuring Spring Data Elasticsearch like described in <a href="#elasticsearch.clients">Elasticsearch Clients</a> by using <code>ElasticsearchConfigurationSupport</code>, <code>AbstractElasticsearchConfiguration</code> or <code>AbstractReactiveElasticsearchConfiguration</code> the refresh policy will be initialized to <code>null</code>.
Previously the reactive code initialized this to <code>IMMEDIATE</code>, now reactive and non-reactive code show the same behaviour.</p>
</div>
</div>
</div>
<div class="sect4">
<h5>Method return types</h5>
<div class="sect5">
<h6>delete methods that take a Query</h6>
<div class="paragraph">
<p>The reactive methods previously returned a <code>Mono&lt;Long&gt;</code> with the number of deleted documents, the non reactive versions were void. They now return a <code>Mono&lt;ByQueryResponse&gt;</code> which contains much more detailed information about the deleted documents and errors that might have occurred.</p>
</div>
</div>
<div class="sect5">
<h6>multiget methods</h6>
<div class="paragraph">
<p>The implementations of <em>multiget</em> previousl only returned the found entities in a <code>List&lt;T&gt;</code> for non-reactive implementations and in a <code>Flux&lt;T&gt;</code> for reactive implementations. If the request contained ids that were not found, the information that these are missing was not available. The user needed to compare the returned ids to the requested ones to find
which ones were missing.</p>
</div>
<div class="paragraph">
<p>Now the <code>multiget</code> methods return a <code>MultiGetItem</code> for every requested id. This contains information about failures (like non existing indices) and the information if the item existed (then it is contained in the `MultiGetItem) or not.
:leveloffset: -1
:leveloffset: -1</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnotedef_1">
<a href="#_footnoteref_1">1</a>. Out of maintenance
</div>
<div class="footnote" id="_footnotedef_2">
<a href="#_footnoteref_2">2</a>. see <a href="#repositories.create-instances.spring">XML Configuration</a>
</div>
</div>
<div id="footer">
<div id="footer-text">
Version 4.2.6<br>
Last updated 2021-10-18 11:22:46 +0200
</div>
</div>
<link rel="stylesheet" href="js/highlight/styles/github.min.css">
<script src="js/highlight/highlight.min.js"></script>
<script>hljs.initHighlighting()</script>
<script type="text/javascript" src="js/tocbot/tocbot.min.js"></script>
<script type="text/javascript" src="js/toc.js"></script>
<script>if (window.parent == window) {(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create', 'UA-2728886-23', 'auto', {'siteSpeedSampleRate': 100});ga('send', 'pageview');}</script><script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon='{"rayId":"6a7bbe0ae8005214","token":"bffcb8a918ae4755926f76178bfbd26b","version":"2021.10.0","si":100}'></script>
</body>
</html>